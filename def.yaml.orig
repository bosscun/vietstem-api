swagger: '2.0'
info:
  version: 1.0.0
  title: drfrank
basePath: /api
paths:
  /Applications:
    post:
      tags:
        - Application
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Application.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Application'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Application'
      deprecated: false
    patch:
      tags:
        - Application
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Application.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Application'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Application'
      deprecated: false
    put:
      tags:
        - Application
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Application.replaceOrCreate__put_Applications
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Application'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Application'
      deprecated: false
    get:
      tags:
        - Application
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Application.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Application'
      deprecated: false
  /Applications/replaceOrCreate:
    post:
      tags:
        - Application
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Application.replaceOrCreate__post_Applications_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Application'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Application'
      deprecated: false
  /Applications/upsertWithWhere:
    post:
      tags:
        - Application
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Application.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Application'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Application'
      deprecated: false
  '/Applications/{id}/exists':
    get:
      tags:
        - Application
      summary: Check whether a model instance exists in the data source.
      operationId: 'Application.exists__get_Applications_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Applications/{id}':
    head:
      tags:
        - Application
      summary: Check whether a model instance exists in the data source.
      operationId: 'Application.exists__head_Applications_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Application
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Application.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Application'
      deprecated: false
    put:
      tags:
        - Application
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Application.replaceById__put_Applications_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Application'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Application'
      deprecated: false
    delete:
      tags:
        - Application
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Application.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Application
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Application.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Application id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Application'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Application'
      deprecated: false
  '/Applications/{id}/replace':
    post:
      tags:
        - Application
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Application.replaceById__post_Applications_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Application'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Application'
      deprecated: false
  /Applications/findOne:
    get:
      tags:
        - Application
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Application.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Application'
      deprecated: false
  /Applications/update:
    post:
      tags:
        - Application
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Application.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Application'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Applications/count:
    get:
      tags:
        - Application
      summary: Count instances of the model matched by where from the data source.
      operationId: Application.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Applications/change-stream:
    post:
      tags:
        - Application
      summary: Create a change stream.
      operationId: Application.createChangeStream__post_Applications_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Application
      summary: Create a change stream.
      operationId: Application.createChangeStream__get_Applications_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Installations/byApp:
    get:
      tags:
        - Installation
      summary: Find installations by application id
      operationId: Installation.findByApp
      parameters:
        - name: deviceType
          in: query
          description: Device type
          required: false
          type: string
        - name: appId
          in: query
          description: Application id
          required: false
          type: string
        - name: appVersion
          in: query
          description: Application version
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Installations/byUser:
    get:
      tags:
        - Installation
      summary: Find installations by user id
      operationId: Installation.findByUser
      parameters:
        - name: deviceType
          in: query
          description: Device type
          required: false
          type: string
        - name: userId
          in: query
          description: User id
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Installations/bySubscriptions:
    get:
      tags:
        - Installation
      summary: Find installations by subscriptions
      operationId: Installation.findBySubscriptions
      parameters:
        - name: deviceType
          in: query
          description: Device type
          required: false
          type: string
        - name: subscriptions
          in: query
          description: Subscriptions
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /Installations:
    post:
      tags:
        - Installation
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Installation.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Installation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Installation'
      deprecated: false
    patch:
      tags:
        - Installation
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Installation.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Installation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Installation'
      deprecated: false
    put:
      tags:
        - Installation
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Installation.replaceOrCreate__put_Installations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Installation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Installation'
      deprecated: false
    get:
      tags:
        - Installation
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Installation.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Installation'
      deprecated: false
  /Installations/replaceOrCreate:
    post:
      tags:
        - Installation
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Installation.replaceOrCreate__post_Installations_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Installation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Installation'
      deprecated: false
  /Installations/upsertWithWhere:
    post:
      tags:
        - Installation
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Installation.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Installation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Installation'
      deprecated: false
  '/Installations/{id}/exists':
    get:
      tags:
        - Installation
      summary: Check whether a model instance exists in the data source.
      operationId: 'Installation.exists__get_Installations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Installations/{id}':
    head:
      tags:
        - Installation
      summary: Check whether a model instance exists in the data source.
      operationId: 'Installation.exists__head_Installations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Installation
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Installation.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Installation'
      deprecated: false
    put:
      tags:
        - Installation
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Installation.replaceById__put_Installations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Installation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Installation'
      deprecated: false
    delete:
      tags:
        - Installation
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Installation.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Installation
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Installation.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Installation id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Installation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Installation'
      deprecated: false
  '/Installations/{id}/replace':
    post:
      tags:
        - Installation
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Installation.replaceById__post_Installations_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Installation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Installation'
      deprecated: false
  /Installations/findOne:
    get:
      tags:
        - Installation
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Installation.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Installation'
      deprecated: false
  /Installations/update:
    post:
      tags:
        - Installation
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Installation.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Installation'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Installations/count:
    get:
      tags:
        - Installation
      summary: Count instances of the model matched by where from the data source.
      operationId: Installation.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Installations/change-stream:
    post:
      tags:
        - Installation
      summary: Create a change stream.
      operationId: Installation.createChangeStream__post_Installations_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Installation
      summary: Create a change stream.
      operationId: Installation.createChangeStream__get_Installations_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Notifications:
    post:
      tags:
        - Notification
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Notification.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    patch:
      tags:
        - Notification
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Notification.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    put:
      tags:
        - Notification
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Notification.replaceOrCreate__put_Notifications
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    get:
      tags:
        - Notification
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Notification.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/replaceOrCreate:
    post:
      tags:
        - Notification
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Notification.replaceOrCreate__post_Notifications_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/upsertWithWhere:
    post:
      tags:
        - Notification
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Notification.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  '/Notifications/{id}/exists':
    get:
      tags:
        - Notification
      summary: Check whether a model instance exists in the data source.
      operationId: 'Notification.exists__get_Notifications_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Notifications/{id}':
    head:
      tags:
        - Notification
      summary: Check whether a model instance exists in the data source.
      operationId: 'Notification.exists__head_Notifications_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Notification
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Notification.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    put:
      tags:
        - Notification
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Notification.replaceById__put_Notifications_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
    delete:
      tags:
        - Notification
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Notification.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Notification
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Notification.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Notification id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  '/Notifications/{id}/replace':
    post:
      tags:
        - Notification
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Notification.replaceById__post_Notifications_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/findOne:
    get:
      tags:
        - Notification
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Notification.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Notification'
      deprecated: false
  /Notifications/update:
    post:
      tags:
        - Notification
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Notification.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Notifications/count:
    get:
      tags:
        - Notification
      summary: Count instances of the model matched by where from the data source.
      operationId: Notification.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Notifications/change-stream:
    post:
      tags:
        - Notification
      summary: Create a change stream.
      operationId: Notification.createChangeStream__post_Notifications_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Notification
      summary: Create a change stream.
      operationId: Notification.createChangeStream__get_Notifications_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Containers:
    get:
      tags:
        - Container
      operationId: Container.getContainers
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
    post:
      tags:
        - Container
      operationId: Container.createContainer
      parameters:
        - name: options
          in: body
          required: false
          schema:
            type: object
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Containers/{container}':
    delete:
      tags:
        - Container
      operationId: Container.destroyContainer
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              undefined:
                type: object
      deprecated: false
    get:
      tags:
        - Container
      operationId: Container.getContainer
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/Containers/{container}/files':
    get:
      tags:
        - Container
      operationId: Container.getFiles
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/Containers/{container}/files/{file}':
    get:
      tags:
        - Container
      operationId: Container.getFile
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    delete:
      tags:
        - Container
      operationId: Container.removeFile
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              undefined:
                type: object
      deprecated: false
  '/Containers/{container}/upload':
    post:
      tags:
        - Container
      operationId: Container.upload
      parameters:
        - name: container
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: object
      deprecated: false
  '/Containers/{container}/download/{file}':
    get:
      tags:
        - Container
      operationId: Container.download
      parameters:
        - name: container
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrIs/{id}/roles/{fk}':
    get:
      tags:
        - UsrI
      summary: Find a related item by id for roles.
      operationId: UsrI.prototype.__findById__roles
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Delete a related item by id for roles.
      operationId: UsrI.prototype.__destroyById__roles
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrI
      summary: Update a related item by id for roles.
      operationId: UsrI.prototype.__updateById__roles
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/UsrIs/{id}/roles/rel/{fk}':
    put:
      tags:
        - UsrI
      summary: Add a related item by id for roles.
      operationId: UsrI.prototype.__link__roles
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Remove the roles relation to an item by id.
      operationId: UsrI.prototype.__unlink__roles
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - UsrI
      summary: Check the existence of roles relation to an item by id.
      operationId: UsrI.prototype.__exists__roles
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/UsrIs/{id}/accessTokens/{fk}':
    get:
      tags:
        - UsrI
      summary: Find a related item by id for accessTokens.
      operationId: UsrI.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Delete a related item by id for accessTokens.
      operationId: UsrI.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrI
      summary: Update a related item by id for accessTokens.
      operationId: UsrI.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
  '/UsrIs/{id}/eBit':
    get:
      tags:
        - UsrI
      summary: Fetches belongsTo relation eBit.
      operationId: UsrI.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/UsrIs/{id}/eBits/{fk}':
    get:
      tags:
        - UsrI
      summary: Find a related item by id for eBits.
      operationId: UsrI.prototype.__findById__eBits
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBits
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Delete a related item by id for eBits.
      operationId: UsrI.prototype.__destroyById__eBits
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBits
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrI
      summary: Update a related item by id for eBits.
      operationId: UsrI.prototype.__updateById__eBits
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBits
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/UsrIs/{id}/mssgsFrom/{fk}':
    get:
      tags:
        - UsrI
      summary: Find a related item by id for mssgsFrom.
      operationId: UsrI.prototype.__findById__mssgsFrom
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for mssgsFrom
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Delete a related item by id for mssgsFrom.
      operationId: UsrI.prototype.__destroyById__mssgsFrom
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for mssgsFrom
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrI
      summary: Update a related item by id for mssgsFrom.
      operationId: UsrI.prototype.__updateById__mssgsFrom
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for mssgsFrom
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
  '/UsrIs/{id}/mssgsTo/{fk}':
    get:
      tags:
        - UsrI
      summary: Find a related item by id for mssgsTo.
      operationId: UsrI.prototype.__findById__mssgsTo
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for mssgsTo
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Delete a related item by id for mssgsTo.
      operationId: UsrI.prototype.__destroyById__mssgsTo
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for mssgsTo
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrI
      summary: Update a related item by id for mssgsTo.
      operationId: UsrI.prototype.__updateById__mssgsTo
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for mssgsTo
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
  '/UsrIs/{id}/usrO':
    get:
      tags:
        - UsrI
      summary: Fetches belongsTo relation usrO.
      operationId: UsrI.prototype.__get__usrO
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
  '/UsrIs/{id}/usrG':
    get:
      tags:
        - UsrI
      summary: Fetches belongsTo relation usrG.
      operationId: UsrI.prototype.__get__usrG
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
  '/UsrIs/{id}/eBitLogs/{fk}':
    get:
      tags:
        - UsrI
      summary: Find a related item by id for eBitLogs.
      operationId: UsrI.prototype.__findById__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBitLogs
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Delete a related item by id for eBitLogs.
      operationId: UsrI.prototype.__destroyById__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBitLogs
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrI
      summary: Update a related item by id for eBitLogs.
      operationId: UsrI.prototype.__updateById__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBitLogs
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
  '/UsrIs/{id}/roles':
    get:
      tags:
        - UsrI
      summary: Queries roles of UsrI.
      operationId: UsrI.prototype.__get__roles
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
    post:
      tags:
        - UsrI
      summary: Creates a new instance in roles of this model.
      operationId: UsrI.prototype.__create__roles
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Deletes all roles of this model.
      operationId: UsrI.prototype.__delete__roles
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrIs/{id}/roles/count':
    get:
      tags:
        - UsrI
      summary: Counts roles of UsrI.
      operationId: UsrI.prototype.__count__roles
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UsrIs/{id}/accessTokens':
    get:
      tags:
        - UsrI
      summary: Queries accessTokens of UsrI.
      operationId: UsrI.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
    post:
      tags:
        - UsrI
      summary: Creates a new instance in accessTokens of this model.
      operationId: UsrI.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Deletes all accessTokens of this model.
      operationId: UsrI.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrIs/{id}/accessTokens/count':
    get:
      tags:
        - UsrI
      summary: Counts accessTokens of UsrI.
      operationId: UsrI.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UsrIs/{id}/eBits':
    get:
      tags:
        - UsrI
      summary: Queries eBits of UsrI.
      operationId: UsrI.prototype.__get__eBits
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EBit'
      deprecated: false
    post:
      tags:
        - UsrI
      summary: Creates a new instance in eBits of this model.
      operationId: UsrI.prototype.__create__eBits
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Deletes all eBits of this model.
      operationId: UsrI.prototype.__delete__eBits
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrIs/{id}/eBits/count':
    get:
      tags:
        - UsrI
      summary: Counts eBits of UsrI.
      operationId: UsrI.prototype.__count__eBits
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UsrIs/{id}/mssgsFrom':
    get:
      tags:
        - UsrI
      summary: Queries mssgsFrom of UsrI.
      operationId: UsrI.prototype.__get__mssgsFrom
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Mssg'
      deprecated: false
    post:
      tags:
        - UsrI
      summary: Creates a new instance in mssgsFrom of this model.
      operationId: UsrI.prototype.__create__mssgsFrom
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Deletes all mssgsFrom of this model.
      operationId: UsrI.prototype.__delete__mssgsFrom
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrIs/{id}/mssgsFrom/count':
    get:
      tags:
        - UsrI
      summary: Counts mssgsFrom of UsrI.
      operationId: UsrI.prototype.__count__mssgsFrom
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UsrIs/{id}/mssgsTo':
    get:
      tags:
        - UsrI
      summary: Queries mssgsTo of UsrI.
      operationId: UsrI.prototype.__get__mssgsTo
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Mssg'
      deprecated: false
    post:
      tags:
        - UsrI
      summary: Creates a new instance in mssgsTo of this model.
      operationId: UsrI.prototype.__create__mssgsTo
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Deletes all mssgsTo of this model.
      operationId: UsrI.prototype.__delete__mssgsTo
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrIs/{id}/mssgsTo/count':
    get:
      tags:
        - UsrI
      summary: Counts mssgsTo of UsrI.
      operationId: UsrI.prototype.__count__mssgsTo
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UsrIs/{id}/eBitLogs':
    get:
      tags:
        - UsrI
      summary: Queries eBitLogs of UsrI.
      operationId: UsrI.prototype.__get__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EBitLog'
      deprecated: false
    post:
      tags:
        - UsrI
      summary: Creates a new instance in eBitLogs of this model.
      operationId: UsrI.prototype.__create__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: Deletes all eBitLogs of this model.
      operationId: UsrI.prototype.__delete__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrIs/{id}/eBitLogs/count':
    get:
      tags:
        - UsrI
      summary: Counts eBitLogs of UsrI.
      operationId: UsrI.prototype.__count__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UsrIs:
    post:
      tags:
        - UsrI
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UsrI.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    patch:
      tags:
        - UsrI
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: UsrI.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    put:
      tags:
        - UsrI
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UsrI.replaceOrCreate__put_UsrIs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    get:
      tags:
        - UsrI
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UsrI.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UsrI'
      deprecated: false
  /UsrIs/replaceOrCreate:
    post:
      tags:
        - UsrI
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UsrI.replaceOrCreate__post_UsrIs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  /UsrIs/upsertWithWhere:
    post:
      tags:
        - UsrI
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: UsrI.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  '/UsrIs/{id}/exists':
    get:
      tags:
        - UsrI
      summary: Check whether a model instance exists in the data source.
      operationId: 'UsrI.exists__get_UsrIs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UsrIs/{id}':
    head:
      tags:
        - UsrI
      summary: Check whether a model instance exists in the data source.
      operationId: 'UsrI.exists__head_UsrIs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UsrI
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UsrI.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    put:
      tags:
        - UsrI
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UsrI.replaceById__put_UsrIs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    delete:
      tags:
        - UsrI
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UsrI.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - UsrI
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: UsrI.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  '/UsrIs/{id}/replace':
    post:
      tags:
        - UsrI
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UsrI.replaceById__post_UsrIs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  /UsrIs/findOne:
    get:
      tags:
        - UsrI
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UsrI.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  /UsrIs/update:
    post:
      tags:
        - UsrI
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UsrI.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UsrIs/count:
    get:
      tags:
        - UsrI
      summary: Count instances of the model matched by where from the data source.
      operationId: UsrI.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UsrIs/change-stream:
    post:
      tags:
        - UsrI
      summary: Create a change stream.
      operationId: UsrI.createChangeStream__post_UsrIs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - UsrI
      summary: Create a change stream.
      operationId: UsrI.createChangeStream__get_UsrIs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /UsrIs/login:
    post:
      tags:
        - UsrI
      summary: Login a user with username/email and password.
      operationId: UsrI.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /UsrIs/logout:
    post:
      tags:
        - UsrI
      summary: Logout a user with access token.
      operationId: UsrI.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrIs/{id}/verify':
    post:
      tags:
        - UsrI
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: UsrI.prototype.verify
      parameters:
        - name: id
          in: path
          description: UsrI id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /UsrIs/confirm:
    get:
      tags:
        - UsrI
      summary: Confirm a user registration with identity verification token.
      operationId: UsrI.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /UsrIs/reset:
    post:
      tags:
        - UsrI
      summary: Reset password for a user with email.
      operationId: UsrI.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /UsrIs/change-password:
    post:
      tags:
        - UsrI
      summary: Change a user's password.
      operationId: UsrI.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /UsrIs/reset-password:
    post:
      tags:
        - UsrI
      summary: Reset user's password via a password-reset token.
      operationId: UsrI.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrIAccessTokens/{id}/user':
    get:
      tags:
        - UsrIAccessToken
      summary: Fetches belongsTo relation user.
      operationId: UsrIAccessToken.prototype.__get__user
      parameters:
        - name: id
          in: path
          description: UsrIAccessToken id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  /UsrIAccessTokens:
    post:
      tags:
        - UsrIAccessToken
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UsrIAccessToken.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
    patch:
      tags:
        - UsrIAccessToken
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: UsrIAccessToken.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
    put:
      tags:
        - UsrIAccessToken
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UsrIAccessToken.replaceOrCreate__put_UsrIAccessTokens
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
    get:
      tags:
        - UsrIAccessToken
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UsrIAccessToken.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
  /UsrIAccessTokens/replaceOrCreate:
    post:
      tags:
        - UsrIAccessToken
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UsrIAccessToken.replaceOrCreate__post_UsrIAccessTokens_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
  /UsrIAccessTokens/upsertWithWhere:
    post:
      tags:
        - UsrIAccessToken
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: UsrIAccessToken.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
  '/UsrIAccessTokens/{id}/exists':
    get:
      tags:
        - UsrIAccessToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'UsrIAccessToken.exists__get_UsrIAccessTokens_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UsrIAccessTokens/{id}':
    head:
      tags:
        - UsrIAccessToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'UsrIAccessToken.exists__head_UsrIAccessTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UsrIAccessToken
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UsrIAccessToken.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
    put:
      tags:
        - UsrIAccessToken
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UsrIAccessToken.replaceById__put_UsrIAccessTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
    delete:
      tags:
        - UsrIAccessToken
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UsrIAccessToken.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - UsrIAccessToken
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: UsrIAccessToken.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: UsrIAccessToken id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
  '/UsrIAccessTokens/{id}/replace':
    post:
      tags:
        - UsrIAccessToken
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UsrIAccessToken.replaceById__post_UsrIAccessTokens_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
  /UsrIAccessTokens/findOne:
    get:
      tags:
        - UsrIAccessToken
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UsrIAccessToken.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrIAccessToken'
      deprecated: false
  /UsrIAccessTokens/update:
    post:
      tags:
        - UsrIAccessToken
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UsrIAccessToken.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrIAccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UsrIAccessTokens/count:
    get:
      tags:
        - UsrIAccessToken
      summary: Count instances of the model matched by where from the data source.
      operationId: UsrIAccessToken.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UsrIAccessTokens/change-stream:
    post:
      tags:
        - UsrIAccessToken
      summary: Create a change stream.
      operationId: UsrIAccessToken.createChangeStream__post_UsrIAccessTokens_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - UsrIAccessToken
      summary: Create a change stream.
      operationId: UsrIAccessToken.createChangeStream__get_UsrIAccessTokens_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /push:
    post:
      tags:
        - Push
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Push.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Push'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Push'
      deprecated: false
    patch:
      tags:
        - Push
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Push.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Push'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Push'
      deprecated: false
    put:
      tags:
        - Push
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Push.replaceOrCreate__put_push
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Push'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Push'
      deprecated: false
    get:
      tags:
        - Push
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Push.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Push'
      deprecated: false
  /push/replaceOrCreate:
    post:
      tags:
        - Push
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Push.replaceOrCreate__post_push_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Push'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Push'
      deprecated: false
  /push/upsertWithWhere:
    post:
      tags:
        - Push
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Push.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Push'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Push'
      deprecated: false
  '/push/{id}/exists':
    get:
      tags:
        - Push
      summary: Check whether a model instance exists in the data source.
      operationId: 'Push.exists__get_push_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/push/{id}':
    head:
      tags:
        - Push
      summary: Check whether a model instance exists in the data source.
      operationId: 'Push.exists__head_push_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Push
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Push.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Push'
      deprecated: false
    put:
      tags:
        - Push
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Push.replaceById__put_push_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Push'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Push'
      deprecated: false
    delete:
      tags:
        - Push
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Push.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Push
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Push.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Push id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Push'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Push'
      deprecated: false
  '/push/{id}/replace':
    post:
      tags:
        - Push
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Push.replaceById__post_push_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Push'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Push'
      deprecated: false
  /push/findOne:
    get:
      tags:
        - Push
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Push.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Push'
      deprecated: false
  /push/update:
    post:
      tags:
        - Push
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Push.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Push'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /push/count:
    get:
      tags:
        - Push
      summary: Count instances of the model matched by where from the data source.
      operationId: Push.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /push/change-stream:
    post:
      tags:
        - Push
      summary: Create a change stream.
      operationId: Push.createChangeStream__post_push_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Push
      summary: Create a change stream.
      operationId: Push.createChangeStream__get_push_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/EBits/{id}/usrI':
    get:
      tags:
        - EBit
      summary: Fetches belongsTo relation usrI.
      operationId: EBit.prototype.__get__usrI
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  '/EBits/{id}/usrIs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation usrIs.
      operationId: EBit.prototype.__get__usrIs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in usrIs of this model.
      operationId: EBit.prototype.__create__usrIs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update usrIs of this model.
      operationId: EBit.prototype.__update__usrIs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes usrIs of this model.
      operationId: EBit.prototype.__destroy__usrIs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/parents/{fk}':
    get:
      tags:
        - EBit
      summary: Find a related item by id for parents.
      operationId: EBit.prototype.__findById__parents
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for parents
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Delete a related item by id for parents.
      operationId: EBit.prototype.__destroyById__parents
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for parents
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update a related item by id for parents.
      operationId: EBit.prototype.__updateById__parents
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for parents
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
  '/EBits/{id}/children/{fk}':
    get:
      tags:
        - EBit
      summary: Find a related item by id for children.
      operationId: EBit.prototype.__findById__children
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for children
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Delete a related item by id for children.
      operationId: EBit.prototype.__destroyById__children
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for children
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update a related item by id for children.
      operationId: EBit.prototype.__updateById__children
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for children
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
  '/EBits/{id}/lnk2s':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation lnk2s.
      operationId: EBit.prototype.__get__lnk2s
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in lnk2s of this model.
      operationId: EBit.prototype.__create__lnk2s
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update lnk2s of this model.
      operationId: EBit.prototype.__update__lnk2s
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes lnk2s of this model.
      operationId: EBit.prototype.__destroy__lnk2s
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/txtEs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation txtEs.
      operationId: EBit.prototype.__get__txtEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in txtEs of this model.
      operationId: EBit.prototype.__create__txtEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update txtEs of this model.
      operationId: EBit.prototype.__update__txtEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes txtEs of this model.
      operationId: EBit.prototype.__destroy__txtEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/picEs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation picEs.
      operationId: EBit.prototype.__get__picEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in picEs of this model.
      operationId: EBit.prototype.__create__picEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update picEs of this model.
      operationId: EBit.prototype.__update__picEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes picEs of this model.
      operationId: EBit.prototype.__destroy__picEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/sndEs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation sndEs.
      operationId: EBit.prototype.__get__sndEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in sndEs of this model.
      operationId: EBit.prototype.__create__sndEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update sndEs of this model.
      operationId: EBit.prototype.__update__sndEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes sndEs of this model.
      operationId: EBit.prototype.__destroy__sndEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/colEs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation colEs.
      operationId: EBit.prototype.__get__colEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in colEs of this model.
      operationId: EBit.prototype.__create__colEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update colEs of this model.
      operationId: EBit.prototype.__update__colEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes colEs of this model.
      operationId: EBit.prototype.__destroy__colEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/tagEs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation tagEs.
      operationId: EBit.prototype.__get__tagEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in tagEs of this model.
      operationId: EBit.prototype.__create__tagEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update tagEs of this model.
      operationId: EBit.prototype.__update__tagEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes tagEs of this model.
      operationId: EBit.prototype.__destroy__tagEs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/mssgs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation mssgs.
      operationId: EBit.prototype.__get__mssgs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in mssgs of this model.
      operationId: EBit.prototype.__create__mssgs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update mssgs of this model.
      operationId: EBit.prototype.__update__mssgs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes mssgs of this model.
      operationId: EBit.prototype.__destroy__mssgs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/frmlMs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation frmlMs.
      operationId: EBit.prototype.__get__frmlMs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in frmlMs of this model.
      operationId: EBit.prototype.__create__frmlMs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update frmlMs of this model.
      operationId: EBit.prototype.__update__frmlMs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes frmlMs of this model.
      operationId: EBit.prototype.__destroy__frmlMs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/frmlIs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation frmlIs.
      operationId: EBit.prototype.__get__frmlIs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in frmlIs of this model.
      operationId: EBit.prototype.__create__frmlIs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update frmlIs of this model.
      operationId: EBit.prototype.__update__frmlIs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes frmlIs of this model.
      operationId: EBit.prototype.__destroy__frmlIs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/usrOs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation usrOs.
      operationId: EBit.prototype.__get__usrOs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in usrOs of this model.
      operationId: EBit.prototype.__create__usrOs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update usrOs of this model.
      operationId: EBit.prototype.__update__usrOs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes usrOs of this model.
      operationId: EBit.prototype.__destroy__usrOs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/usrO':
    get:
      tags:
        - EBit
      summary: Fetches belongsTo relation usrO.
      operationId: EBit.prototype.__get__usrO
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
  '/EBits/{id}/tagMs':
    get:
      tags:
        - EBit
      summary: Fetches hasOne relation tagMs.
      operationId: EBit.prototype.__get__tagMs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in tagMs of this model.
      operationId: EBit.prototype.__create__tagMs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update tagMs of this model.
      operationId: EBit.prototype.__update__tagMs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes tagMs of this model.
      operationId: EBit.prototype.__destroy__tagMs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/eBitLogs/{fk}':
    get:
      tags:
        - EBit
      summary: Find a related item by id for eBitLogs.
      operationId: EBit.prototype.__findById__eBitLogs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBitLogs
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Delete a related item by id for eBitLogs.
      operationId: EBit.prototype.__destroyById__eBitLogs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBitLogs
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - EBit
      summary: Update a related item by id for eBitLogs.
      operationId: EBit.prototype.__updateById__eBitLogs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBitLogs
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
  '/EBits/{id}/parents':
    get:
      tags:
        - EBit
      summary: Queries parents of EBit.
      operationId: EBit.prototype.__get__parents
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Lnk2'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in parents of this model.
      operationId: EBit.prototype.__create__parents
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes all parents of this model.
      operationId: EBit.prototype.__delete__parents
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/parents/count':
    get:
      tags:
        - EBit
      summary: Counts parents of EBit.
      operationId: EBit.prototype.__count__parents
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/EBits/{id}/children':
    get:
      tags:
        - EBit
      summary: Queries children of EBit.
      operationId: EBit.prototype.__get__children
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Lnk2'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in children of this model.
      operationId: EBit.prototype.__create__children
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes all children of this model.
      operationId: EBit.prototype.__delete__children
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/children/count':
    get:
      tags:
        - EBit
      summary: Counts children of EBit.
      operationId: EBit.prototype.__count__children
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/EBits/{id}/eBitLogs':
    get:
      tags:
        - EBit
      summary: Queries eBitLogs of EBit.
      operationId: EBit.prototype.__get__eBitLogs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EBitLog'
      deprecated: false
    post:
      tags:
        - EBit
      summary: Creates a new instance in eBitLogs of this model.
      operationId: EBit.prototype.__create__eBitLogs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: Deletes all eBitLogs of this model.
      operationId: EBit.prototype.__delete__eBitLogs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/EBits/{id}/eBitLogs/count':
    get:
      tags:
        - EBit
      summary: Counts eBitLogs of EBit.
      operationId: EBit.prototype.__count__eBitLogs
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /EBits:
    post:
      tags:
        - EBit
      summary: Create a new instance of the model and persist it into the data source.
      operationId: EBit.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
    patch:
      tags:
        - EBit
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: EBit.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
    put:
      tags:
        - EBit
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: EBit.replaceOrCreate__put_EBits
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
    get:
      tags:
        - EBit
      summary: Find all instances of the model matched by filter from the data source.
      operationId: EBit.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EBit'
      deprecated: false
  /EBits/replaceOrCreate:
    post:
      tags:
        - EBit
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: EBit.replaceOrCreate__post_EBits_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  /EBits/upsertWithWhere:
    post:
      tags:
        - EBit
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: EBit.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/EBits/{id}/exists':
    get:
      tags:
        - EBit
      summary: Check whether a model instance exists in the data source.
      operationId: 'EBit.exists__get_EBits_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/EBits/{id}':
    head:
      tags:
        - EBit
      summary: Check whether a model instance exists in the data source.
      operationId: 'EBit.exists__head_EBits_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - EBit
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: EBit.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
    put:
      tags:
        - EBit
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'EBit.replaceById__put_EBits_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
    delete:
      tags:
        - EBit
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: EBit.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - EBit
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: EBit.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: EBit id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/EBits/{id}/replace':
    post:
      tags:
        - EBit
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'EBit.replaceById__post_EBits_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  /EBits/findOne:
    get:
      tags:
        - EBit
      summary: Find first instance of the model matched by filter from the data source.
      operationId: EBit.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  /EBits/update:
    post:
      tags:
        - EBit
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: EBit.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /EBits/count:
    get:
      tags:
        - EBit
      summary: Count instances of the model matched by where from the data source.
      operationId: EBit.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /EBits/change-stream:
    post:
      tags:
        - EBit
      summary: Create a change stream.
      operationId: EBit.createChangeStream__post_EBits_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - EBit
      summary: Create a change stream.
      operationId: EBit.createChangeStream__get_EBits_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/EBits/{id}/interact':
    put:
      tags:
        - EBit
      summary: interact eBits
      operationId: EBit.interact
      parameters:
        - name: id
          in: path
          description: eBit id
          required: true
          type: number
          format: double
        - name: eBit
          in: body
          description: eBit instance to interact
          required: true
          schema:
            description: eBit instance to interact
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            description: update eBit instance
            $ref: '#/definitions/EBit'
      deprecated: false
  '/Lnk2s/{id}/parent':
    get:
      tags:
        - Lnk2
      summary: Fetches belongsTo relation parent.
      operationId: Lnk2.prototype.__get__parent
      parameters:
        - name: id
          in: path
          description: Lnk2 id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/Lnk2s/{id}/child':
    get:
      tags:
        - Lnk2
      summary: Fetches belongsTo relation child.
      operationId: Lnk2.prototype.__get__child
      parameters:
        - name: id
          in: path
          description: Lnk2 id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/Lnk2s/{id}/eBit':
    get:
      tags:
        - Lnk2
      summary: Fetches belongsTo relation eBit.
      operationId: Lnk2.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: Lnk2 id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  /Lnk2s:
    post:
      tags:
        - Lnk2
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Lnk2.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    patch:
      tags:
        - Lnk2
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Lnk2.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    put:
      tags:
        - Lnk2
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Lnk2.replaceOrCreate__put_Lnk2s
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    get:
      tags:
        - Lnk2
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Lnk2.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Lnk2'
      deprecated: false
  /Lnk2s/replaceOrCreate:
    post:
      tags:
        - Lnk2
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Lnk2.replaceOrCreate__post_Lnk2s_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
  /Lnk2s/upsertWithWhere:
    post:
      tags:
        - Lnk2
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Lnk2.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
  '/Lnk2s/{id}/exists':
    get:
      tags:
        - Lnk2
      summary: Check whether a model instance exists in the data source.
      operationId: 'Lnk2.exists__get_Lnk2s_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Lnk2s/{id}':
    head:
      tags:
        - Lnk2
      summary: Check whether a model instance exists in the data source.
      operationId: 'Lnk2.exists__head_Lnk2s_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Lnk2
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Lnk2.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    put:
      tags:
        - Lnk2
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Lnk2.replaceById__put_Lnk2s_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
    delete:
      tags:
        - Lnk2
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Lnk2.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Lnk2
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Lnk2.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Lnk2 id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
  '/Lnk2s/{id}/replace':
    post:
      tags:
        - Lnk2
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Lnk2.replaceById__post_Lnk2s_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
  /Lnk2s/findOne:
    get:
      tags:
        - Lnk2
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Lnk2.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lnk2'
      deprecated: false
  /Lnk2s/update:
    post:
      tags:
        - Lnk2
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Lnk2.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Lnk2'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Lnk2s/count:
    get:
      tags:
        - Lnk2
      summary: Count instances of the model matched by where from the data source.
      operationId: Lnk2.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Lnk2s/change-stream:
    post:
      tags:
        - Lnk2
      summary: Create a change stream.
      operationId: Lnk2.createChangeStream__post_Lnk2s_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Lnk2
      summary: Create a change stream.
      operationId: Lnk2.createChangeStream__get_Lnk2s_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/TxtEs/{id}/containers/{fk}':
    get:
      tags:
        - TxtE
      summary: Find a related item by id for containers.
      operationId: TxtE.prototype.__findById__containers
      parameters:
        - name: id
          in: path
          description: TxtE id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for containers
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Container'
      deprecated: false
    delete:
      tags:
        - TxtE
      summary: Delete a related item by id for containers.
      operationId: TxtE.prototype.__destroyById__containers
      parameters:
        - name: id
          in: path
          description: TxtE id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for containers
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - TxtE
      summary: Update a related item by id for containers.
      operationId: TxtE.prototype.__updateById__containers
      parameters:
        - name: id
          in: path
          description: TxtE id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for containers
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Container'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Container'
      deprecated: false
  '/TxtEs/{id}/eBit':
    get:
      tags:
        - TxtE
      summary: Fetches belongsTo relation eBit.
      operationId: TxtE.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: TxtE id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/TxtEs/{id}/containers':
    get:
      tags:
        - TxtE
      summary: Queries containers of TxtE.
      operationId: TxtE.prototype.__get__containers
      parameters:
        - name: id
          in: path
          description: TxtE id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Container'
      deprecated: false
    post:
      tags:
        - TxtE
      summary: Creates a new instance in containers of this model.
      operationId: TxtE.prototype.__create__containers
      parameters:
        - name: id
          in: path
          description: TxtE id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Container'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Container'
      deprecated: false
    delete:
      tags:
        - TxtE
      summary: Deletes all containers of this model.
      operationId: TxtE.prototype.__delete__containers
      parameters:
        - name: id
          in: path
          description: TxtE id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/TxtEs/{id}/containers/count':
    get:
      tags:
        - TxtE
      summary: Counts containers of TxtE.
      operationId: TxtE.prototype.__count__containers
      parameters:
        - name: id
          in: path
          description: TxtE id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /TxtEs:
    post:
      tags:
        - TxtE
      summary: Create a new instance of the model and persist it into the data source.
      operationId: TxtE.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
    patch:
      tags:
        - TxtE
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: TxtE.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
    put:
      tags:
        - TxtE
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: TxtE.replaceOrCreate__put_TxtEs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
    get:
      tags:
        - TxtE
      summary: Find all instances of the model matched by filter from the data source.
      operationId: TxtE.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/TxtE'
      deprecated: false
  /TxtEs/replaceOrCreate:
    post:
      tags:
        - TxtE
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: TxtE.replaceOrCreate__post_TxtEs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
  /TxtEs/upsertWithWhere:
    post:
      tags:
        - TxtE
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: TxtE.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
  '/TxtEs/{id}/exists':
    get:
      tags:
        - TxtE
      summary: Check whether a model instance exists in the data source.
      operationId: 'TxtE.exists__get_TxtEs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/TxtEs/{id}':
    head:
      tags:
        - TxtE
      summary: Check whether a model instance exists in the data source.
      operationId: 'TxtE.exists__head_TxtEs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - TxtE
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: TxtE.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
    put:
      tags:
        - TxtE
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'TxtE.replaceById__put_TxtEs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
    delete:
      tags:
        - TxtE
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: TxtE.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - TxtE
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: TxtE.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: TxtE id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
  '/TxtEs/{id}/replace':
    post:
      tags:
        - TxtE
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'TxtE.replaceById__post_TxtEs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
  /TxtEs/findOne:
    get:
      tags:
        - TxtE
      summary: Find first instance of the model matched by filter from the data source.
      operationId: TxtE.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TxtE'
      deprecated: false
  /TxtEs/update:
    post:
      tags:
        - TxtE
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: TxtE.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TxtE'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /TxtEs/count:
    get:
      tags:
        - TxtE
      summary: Count instances of the model matched by where from the data source.
      operationId: TxtE.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /TxtEs/change-stream:
    post:
      tags:
        - TxtE
      summary: Create a change stream.
      operationId: TxtE.createChangeStream__post_TxtEs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - TxtE
      summary: Create a change stream.
      operationId: TxtE.createChangeStream__get_TxtEs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/PicEs/{id}/eBit':
    get:
      tags:
        - PicE
      summary: Fetches belongsTo relation eBit.
      operationId: PicE.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: PicE id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  /PicEs:
    post:
      tags:
        - PicE
      summary: Create a new instance of the model and persist it into the data source.
      operationId: PicE.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
    patch:
      tags:
        - PicE
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: PicE.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
    put:
      tags:
        - PicE
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: PicE.replaceOrCreate__put_PicEs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
    get:
      tags:
        - PicE
      summary: Find all instances of the model matched by filter from the data source.
      operationId: PicE.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/PicE'
      deprecated: false
  /PicEs/replaceOrCreate:
    post:
      tags:
        - PicE
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: PicE.replaceOrCreate__post_PicEs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
  /PicEs/upsertWithWhere:
    post:
      tags:
        - PicE
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: PicE.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
  '/PicEs/{id}/exists':
    get:
      tags:
        - PicE
      summary: Check whether a model instance exists in the data source.
      operationId: 'PicE.exists__get_PicEs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/PicEs/{id}':
    head:
      tags:
        - PicE
      summary: Check whether a model instance exists in the data source.
      operationId: 'PicE.exists__head_PicEs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - PicE
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: PicE.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
    put:
      tags:
        - PicE
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'PicE.replaceById__put_PicEs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
    delete:
      tags:
        - PicE
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: PicE.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - PicE
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: PicE.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: PicE id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
  '/PicEs/{id}/replace':
    post:
      tags:
        - PicE
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'PicE.replaceById__post_PicEs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
  /PicEs/findOne:
    get:
      tags:
        - PicE
      summary: Find first instance of the model matched by filter from the data source.
      operationId: PicE.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/PicE'
      deprecated: false
  /PicEs/update:
    post:
      tags:
        - PicE
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: PicE.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/PicE'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /PicEs/count:
    get:
      tags:
        - PicE
      summary: Count instances of the model matched by where from the data source.
      operationId: PicE.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /PicEs/change-stream:
    post:
      tags:
        - PicE
      summary: Create a change stream.
      operationId: PicE.createChangeStream__post_PicEs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - PicE
      summary: Create a change stream.
      operationId: PicE.createChangeStream__get_PicEs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/SndEs/{id}/eBit':
    get:
      tags:
        - SndE
      summary: Fetches belongsTo relation eBit.
      operationId: SndE.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: SndE id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  /SndEs:
    post:
      tags:
        - SndE
      summary: Create a new instance of the model and persist it into the data source.
      operationId: SndE.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
    patch:
      tags:
        - SndE
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: SndE.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
    put:
      tags:
        - SndE
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: SndE.replaceOrCreate__put_SndEs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
    get:
      tags:
        - SndE
      summary: Find all instances of the model matched by filter from the data source.
      operationId: SndE.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/SndE'
      deprecated: false
  /SndEs/replaceOrCreate:
    post:
      tags:
        - SndE
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: SndE.replaceOrCreate__post_SndEs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
  /SndEs/upsertWithWhere:
    post:
      tags:
        - SndE
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: SndE.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
  '/SndEs/{id}/exists':
    get:
      tags:
        - SndE
      summary: Check whether a model instance exists in the data source.
      operationId: 'SndE.exists__get_SndEs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/SndEs/{id}':
    head:
      tags:
        - SndE
      summary: Check whether a model instance exists in the data source.
      operationId: 'SndE.exists__head_SndEs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - SndE
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: SndE.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
    put:
      tags:
        - SndE
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'SndE.replaceById__put_SndEs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
    delete:
      tags:
        - SndE
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: SndE.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - SndE
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: SndE.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: SndE id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
  '/SndEs/{id}/replace':
    post:
      tags:
        - SndE
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'SndE.replaceById__post_SndEs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
  /SndEs/findOne:
    get:
      tags:
        - SndE
      summary: Find first instance of the model matched by filter from the data source.
      operationId: SndE.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/SndE'
      deprecated: false
  /SndEs/update:
    post:
      tags:
        - SndE
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: SndE.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/SndE'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /SndEs/count:
    get:
      tags:
        - SndE
      summary: Count instances of the model matched by where from the data source.
      operationId: SndE.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /SndEs/change-stream:
    post:
      tags:
        - SndE
      summary: Create a change stream.
      operationId: SndE.createChangeStream__post_SndEs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - SndE
      summary: Create a change stream.
      operationId: SndE.createChangeStream__get_SndEs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/ColEs/{id}/eBit':
    get:
      tags:
        - ColE
      summary: Fetches belongsTo relation eBit.
      operationId: ColE.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: ColE id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  /ColEs:
    post:
      tags:
        - ColE
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ColE.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
    patch:
      tags:
        - ColE
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: ColE.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
    put:
      tags:
        - ColE
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ColE.replaceOrCreate__put_ColEs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
    get:
      tags:
        - ColE
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ColE.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ColE'
      deprecated: false
  /ColEs/replaceOrCreate:
    post:
      tags:
        - ColE
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ColE.replaceOrCreate__post_ColEs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
  /ColEs/upsertWithWhere:
    post:
      tags:
        - ColE
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: ColE.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
  '/ColEs/{id}/exists':
    get:
      tags:
        - ColE
      summary: Check whether a model instance exists in the data source.
      operationId: 'ColE.exists__get_ColEs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ColEs/{id}':
    head:
      tags:
        - ColE
      summary: Check whether a model instance exists in the data source.
      operationId: 'ColE.exists__head_ColEs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ColE
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ColE.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
    put:
      tags:
        - ColE
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'ColE.replaceById__put_ColEs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
    delete:
      tags:
        - ColE
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ColE.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ColE
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: ColE.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: ColE id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
  '/ColEs/{id}/replace':
    post:
      tags:
        - ColE
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'ColE.replaceById__post_ColEs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
  /ColEs/findOne:
    get:
      tags:
        - ColE
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ColE.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ColE'
      deprecated: false
  /ColEs/update:
    post:
      tags:
        - ColE
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ColE.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ColE'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ColEs/count:
    get:
      tags:
        - ColE
      summary: Count instances of the model matched by where from the data source.
      operationId: ColE.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ColEs/change-stream:
    post:
      tags:
        - ColE
      summary: Create a change stream.
      operationId: ColE.createChangeStream__post_ColEs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - ColE
      summary: Create a change stream.
      operationId: ColE.createChangeStream__get_ColEs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/TagEs/{id}/eBit':
    get:
      tags:
        - TagE
      summary: Fetches belongsTo relation eBit.
      operationId: TagE.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: TagE id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/TagEs/{id}/tagM':
    get:
      tags:
        - TagE
      summary: Fetches belongsTo relation tagM.
      operationId: TagE.prototype.__get__tagM
      parameters:
        - name: id
          in: path
          description: TagE id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
  /TagEs:
    post:
      tags:
        - TagE
      summary: Create a new instance of the model and persist it into the data source.
      operationId: TagE.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
    patch:
      tags:
        - TagE
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: TagE.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
    put:
      tags:
        - TagE
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: TagE.replaceOrCreate__put_TagEs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
    get:
      tags:
        - TagE
      summary: Find all instances of the model matched by filter from the data source.
      operationId: TagE.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/TagE'
      deprecated: false
  /TagEs/replaceOrCreate:
    post:
      tags:
        - TagE
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: TagE.replaceOrCreate__post_TagEs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
  /TagEs/upsertWithWhere:
    post:
      tags:
        - TagE
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: TagE.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
  '/TagEs/{id}/exists':
    get:
      tags:
        - TagE
      summary: Check whether a model instance exists in the data source.
      operationId: 'TagE.exists__get_TagEs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/TagEs/{id}':
    head:
      tags:
        - TagE
      summary: Check whether a model instance exists in the data source.
      operationId: 'TagE.exists__head_TagEs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - TagE
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: TagE.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
    put:
      tags:
        - TagE
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'TagE.replaceById__put_TagEs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
    delete:
      tags:
        - TagE
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: TagE.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - TagE
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: TagE.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: TagE id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
  '/TagEs/{id}/replace':
    post:
      tags:
        - TagE
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'TagE.replaceById__post_TagEs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
  /TagEs/findOne:
    get:
      tags:
        - TagE
      summary: Find first instance of the model matched by filter from the data source.
      operationId: TagE.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
  /TagEs/update:
    post:
      tags:
        - TagE
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: TagE.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /TagEs/count:
    get:
      tags:
        - TagE
      summary: Count instances of the model matched by where from the data source.
      operationId: TagE.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /TagEs/change-stream:
    post:
      tags:
        - TagE
      summary: Create a change stream.
      operationId: TagE.createChangeStream__post_TagEs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - TagE
      summary: Create a change stream.
      operationId: TagE.createChangeStream__get_TagEs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Mssgs/{id}/eBit':
    get:
      tags:
        - Mssg
      summary: Fetches belongsTo relation eBit.
      operationId: Mssg.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: Mssg id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/Mssgs/{id}/fromUsrI':
    get:
      tags:
        - Mssg
      summary: Fetches belongsTo relation fromUsrI.
      operationId: Mssg.prototype.__get__fromUsrI
      parameters:
        - name: id
          in: path
          description: Mssg id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  '/Mssgs/{id}/toUsrI':
    get:
      tags:
        - Mssg
      summary: Fetches belongsTo relation toUsrI.
      operationId: Mssg.prototype.__get__toUsrI
      parameters:
        - name: id
          in: path
          description: Mssg id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  /Mssgs:
    post:
      tags:
        - Mssg
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Mssg.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    patch:
      tags:
        - Mssg
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Mssg.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    put:
      tags:
        - Mssg
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Mssg.replaceOrCreate__put_Mssgs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    get:
      tags:
        - Mssg
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Mssg.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Mssg'
      deprecated: false
  /Mssgs/replaceOrCreate:
    post:
      tags:
        - Mssg
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Mssg.replaceOrCreate__post_Mssgs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
  /Mssgs/upsertWithWhere:
    post:
      tags:
        - Mssg
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Mssg.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
  '/Mssgs/{id}/exists':
    get:
      tags:
        - Mssg
      summary: Check whether a model instance exists in the data source.
      operationId: 'Mssg.exists__get_Mssgs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Mssgs/{id}':
    head:
      tags:
        - Mssg
      summary: Check whether a model instance exists in the data source.
      operationId: 'Mssg.exists__head_Mssgs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Mssg
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Mssg.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    put:
      tags:
        - Mssg
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Mssg.replaceById__put_Mssgs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
    delete:
      tags:
        - Mssg
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Mssg.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Mssg
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Mssg.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Mssg id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
  '/Mssgs/{id}/replace':
    post:
      tags:
        - Mssg
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Mssg.replaceById__post_Mssgs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
  /Mssgs/findOne:
    get:
      tags:
        - Mssg
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Mssg.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Mssg'
      deprecated: false
  /Mssgs/update:
    post:
      tags:
        - Mssg
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Mssg.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Mssg'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Mssgs/count:
    get:
      tags:
        - Mssg
      summary: Count instances of the model matched by where from the data source.
      operationId: Mssg.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Mssgs/change-stream:
    post:
      tags:
        - Mssg
      summary: Create a change stream.
      operationId: Mssg.createChangeStream__post_Mssgs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Mssg
      summary: Create a change stream.
      operationId: Mssg.createChangeStream__get_Mssgs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/FrmlMs/{id}/eBit':
    get:
      tags:
        - FrmlM
      summary: Fetches belongsTo relation eBit.
      operationId: FrmlM.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: FrmlM id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/FrmlMs/{id}/frmlIs/{fk}':
    get:
      tags:
        - FrmlM
      summary: Find a related item by id for frmlIs.
      operationId: FrmlM.prototype.__findById__frmlIs
      parameters:
        - name: id
          in: path
          description: FrmlM id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for frmlIs
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
    delete:
      tags:
        - FrmlM
      summary: Delete a related item by id for frmlIs.
      operationId: FrmlM.prototype.__destroyById__frmlIs
      parameters:
        - name: id
          in: path
          description: FrmlM id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for frmlIs
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - FrmlM
      summary: Update a related item by id for frmlIs.
      operationId: FrmlM.prototype.__updateById__frmlIs
      parameters:
        - name: id
          in: path
          description: FrmlM id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for frmlIs
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
  '/FrmlMs/{id}/frmlIs':
    get:
      tags:
        - FrmlM
      summary: Queries frmlIs of FrmlM.
      operationId: FrmlM.prototype.__get__frmlIs
      parameters:
        - name: id
          in: path
          description: FrmlM id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FrmlI'
      deprecated: false
    post:
      tags:
        - FrmlM
      summary: Creates a new instance in frmlIs of this model.
      operationId: FrmlM.prototype.__create__frmlIs
      parameters:
        - name: id
          in: path
          description: FrmlM id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
    delete:
      tags:
        - FrmlM
      summary: Deletes all frmlIs of this model.
      operationId: FrmlM.prototype.__delete__frmlIs
      parameters:
        - name: id
          in: path
          description: FrmlM id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/FrmlMs/{id}/frmlIs/count':
    get:
      tags:
        - FrmlM
      summary: Counts frmlIs of FrmlM.
      operationId: FrmlM.prototype.__count__frmlIs
      parameters:
        - name: id
          in: path
          description: FrmlM id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /FrmlMs:
    post:
      tags:
        - FrmlM
      summary: Create a new instance of the model and persist it into the data source.
      operationId: FrmlM.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
    patch:
      tags:
        - FrmlM
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: FrmlM.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
    put:
      tags:
        - FrmlM
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: FrmlM.replaceOrCreate__put_FrmlMs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
    get:
      tags:
        - FrmlM
      summary: Find all instances of the model matched by filter from the data source.
      operationId: FrmlM.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FrmlM'
      deprecated: false
  /FrmlMs/replaceOrCreate:
    post:
      tags:
        - FrmlM
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: FrmlM.replaceOrCreate__post_FrmlMs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
  /FrmlMs/upsertWithWhere:
    post:
      tags:
        - FrmlM
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: FrmlM.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
  '/FrmlMs/{id}/exists':
    get:
      tags:
        - FrmlM
      summary: Check whether a model instance exists in the data source.
      operationId: 'FrmlM.exists__get_FrmlMs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/FrmlMs/{id}':
    head:
      tags:
        - FrmlM
      summary: Check whether a model instance exists in the data source.
      operationId: 'FrmlM.exists__head_FrmlMs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - FrmlM
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: FrmlM.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
    put:
      tags:
        - FrmlM
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'FrmlM.replaceById__put_FrmlMs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
    delete:
      tags:
        - FrmlM
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: FrmlM.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - FrmlM
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: FrmlM.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: FrmlM id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
  '/FrmlMs/{id}/replace':
    post:
      tags:
        - FrmlM
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'FrmlM.replaceById__post_FrmlMs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
  /FrmlMs/findOne:
    get:
      tags:
        - FrmlM
      summary: Find first instance of the model matched by filter from the data source.
      operationId: FrmlM.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
  /FrmlMs/update:
    post:
      tags:
        - FrmlM
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: FrmlM.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FrmlM'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /FrmlMs/count:
    get:
      tags:
        - FrmlM
      summary: Count instances of the model matched by where from the data source.
      operationId: FrmlM.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /FrmlMs/change-stream:
    post:
      tags:
        - FrmlM
      summary: Create a change stream.
      operationId: FrmlM.createChangeStream__post_FrmlMs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - FrmlM
      summary: Create a change stream.
      operationId: FrmlM.createChangeStream__get_FrmlMs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/FrmlIs/{id}/eBit':
    get:
      tags:
        - FrmlI
      summary: Fetches belongsTo relation eBit.
      operationId: FrmlI.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: FrmlI id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/FrmlIs/{id}/frmlM':
    get:
      tags:
        - FrmlI
      summary: Fetches belongsTo relation frmlM.
      operationId: FrmlI.prototype.__get__frmlM
      parameters:
        - name: id
          in: path
          description: FrmlI id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlM'
      deprecated: false
  /FrmlIs:
    post:
      tags:
        - FrmlI
      summary: Create a new instance of the model and persist it into the data source.
      operationId: FrmlI.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
    patch:
      tags:
        - FrmlI
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: FrmlI.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
    put:
      tags:
        - FrmlI
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: FrmlI.replaceOrCreate__put_FrmlIs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
    get:
      tags:
        - FrmlI
      summary: Find all instances of the model matched by filter from the data source.
      operationId: FrmlI.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/FrmlI'
      deprecated: false
  /FrmlIs/replaceOrCreate:
    post:
      tags:
        - FrmlI
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: FrmlI.replaceOrCreate__post_FrmlIs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
  /FrmlIs/upsertWithWhere:
    post:
      tags:
        - FrmlI
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: FrmlI.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
  '/FrmlIs/{id}/exists':
    get:
      tags:
        - FrmlI
      summary: Check whether a model instance exists in the data source.
      operationId: 'FrmlI.exists__get_FrmlIs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/FrmlIs/{id}':
    head:
      tags:
        - FrmlI
      summary: Check whether a model instance exists in the data source.
      operationId: 'FrmlI.exists__head_FrmlIs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - FrmlI
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: FrmlI.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
    put:
      tags:
        - FrmlI
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'FrmlI.replaceById__put_FrmlIs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
    delete:
      tags:
        - FrmlI
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: FrmlI.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - FrmlI
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: FrmlI.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: FrmlI id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
  '/FrmlIs/{id}/replace':
    post:
      tags:
        - FrmlI
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'FrmlI.replaceById__post_FrmlIs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
  /FrmlIs/findOne:
    get:
      tags:
        - FrmlI
      summary: Find first instance of the model matched by filter from the data source.
      operationId: FrmlI.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/FrmlI'
      deprecated: false
  /FrmlIs/update:
    post:
      tags:
        - FrmlI
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: FrmlI.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/FrmlI'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /FrmlIs/count:
    get:
      tags:
        - FrmlI
      summary: Count instances of the model matched by where from the data source.
      operationId: FrmlI.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /FrmlIs/change-stream:
    post:
      tags:
        - FrmlI
      summary: Create a change stream.
      operationId: FrmlI.createChangeStream__post_FrmlIs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - FrmlI
      summary: Create a change stream.
      operationId: FrmlI.createChangeStream__get_FrmlIs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/UsrOs/{id}/usrIs/{fk}':
    get:
      tags:
        - UsrO
      summary: Find a related item by id for usrIs.
      operationId: UsrO.prototype.__findById__usrIs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for usrIs
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    delete:
      tags:
        - UsrO
      summary: Delete a related item by id for usrIs.
      operationId: UsrO.prototype.__destroyById__usrIs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for usrIs
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrO
      summary: Update a related item by id for usrIs.
      operationId: UsrO.prototype.__updateById__usrIs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for usrIs
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  '/UsrOs/{id}/eBit':
    get:
      tags:
        - UsrO
      summary: Fetches belongsTo relation eBit.
      operationId: UsrO.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/UsrOs/{id}/eBits/{fk}':
    get:
      tags:
        - UsrO
      summary: Find a related item by id for eBits.
      operationId: UsrO.prototype.__findById__eBits
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBits
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
    delete:
      tags:
        - UsrO
      summary: Delete a related item by id for eBits.
      operationId: UsrO.prototype.__destroyById__eBits
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBits
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrO
      summary: Update a related item by id for eBits.
      operationId: UsrO.prototype.__updateById__eBits
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBits
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/UsrOs/{id}/usrGs/{fk}':
    get:
      tags:
        - UsrO
      summary: Find a related item by id for usrGs.
      operationId: UsrO.prototype.__findById__usrGs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for usrGs
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
    delete:
      tags:
        - UsrO
      summary: Delete a related item by id for usrGs.
      operationId: UsrO.prototype.__destroyById__usrGs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for usrGs
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrO
      summary: Update a related item by id for usrGs.
      operationId: UsrO.prototype.__updateById__usrGs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for usrGs
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
  '/UsrOs/{id}/eBitLogs/{fk}':
    get:
      tags:
        - UsrO
      summary: Find a related item by id for eBitLogs.
      operationId: UsrO.prototype.__findById__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBitLogs
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    delete:
      tags:
        - UsrO
      summary: Delete a related item by id for eBitLogs.
      operationId: UsrO.prototype.__destroyById__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBitLogs
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrO
      summary: Update a related item by id for eBitLogs.
      operationId: UsrO.prototype.__updateById__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for eBitLogs
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
  '/UsrOs/{id}/usrIs':
    get:
      tags:
        - UsrO
      summary: Queries usrIs of UsrO.
      operationId: UsrO.prototype.__get__usrIs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UsrI'
      deprecated: false
    post:
      tags:
        - UsrO
      summary: Creates a new instance in usrIs of this model.
      operationId: UsrO.prototype.__create__usrIs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    delete:
      tags:
        - UsrO
      summary: Deletes all usrIs of this model.
      operationId: UsrO.prototype.__delete__usrIs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrOs/{id}/usrIs/count':
    get:
      tags:
        - UsrO
      summary: Counts usrIs of UsrO.
      operationId: UsrO.prototype.__count__usrIs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UsrOs/{id}/eBits':
    get:
      tags:
        - UsrO
      summary: Queries eBits of UsrO.
      operationId: UsrO.prototype.__get__eBits
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EBit'
      deprecated: false
    post:
      tags:
        - UsrO
      summary: Creates a new instance in eBits of this model.
      operationId: UsrO.prototype.__create__eBits
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/EBit'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
    delete:
      tags:
        - UsrO
      summary: Deletes all eBits of this model.
      operationId: UsrO.prototype.__delete__eBits
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrOs/{id}/eBits/count':
    get:
      tags:
        - UsrO
      summary: Counts eBits of UsrO.
      operationId: UsrO.prototype.__count__eBits
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UsrOs/{id}/usrGs':
    get:
      tags:
        - UsrO
      summary: Queries usrGs of UsrO.
      operationId: UsrO.prototype.__get__usrGs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UsrG'
      deprecated: false
    post:
      tags:
        - UsrO
      summary: Creates a new instance in usrGs of this model.
      operationId: UsrO.prototype.__create__usrGs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
    delete:
      tags:
        - UsrO
      summary: Deletes all usrGs of this model.
      operationId: UsrO.prototype.__delete__usrGs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrOs/{id}/usrGs/count':
    get:
      tags:
        - UsrO
      summary: Counts usrGs of UsrO.
      operationId: UsrO.prototype.__count__usrGs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/UsrOs/{id}/eBitLogs':
    get:
      tags:
        - UsrO
      summary: Queries eBitLogs of UsrO.
      operationId: UsrO.prototype.__get__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EBitLog'
      deprecated: false
    post:
      tags:
        - UsrO
      summary: Creates a new instance in eBitLogs of this model.
      operationId: UsrO.prototype.__create__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    delete:
      tags:
        - UsrO
      summary: Deletes all eBitLogs of this model.
      operationId: UsrO.prototype.__delete__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrOs/{id}/eBitLogs/count':
    get:
      tags:
        - UsrO
      summary: Counts eBitLogs of UsrO.
      operationId: UsrO.prototype.__count__eBitLogs
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UsrOs:
    post:
      tags:
        - UsrO
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UsrO.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
    patch:
      tags:
        - UsrO
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: UsrO.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
    put:
      tags:
        - UsrO
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UsrO.replaceOrCreate__put_UsrOs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
    get:
      tags:
        - UsrO
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UsrO.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UsrO'
      deprecated: false
  /UsrOs/replaceOrCreate:
    post:
      tags:
        - UsrO
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UsrO.replaceOrCreate__post_UsrOs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
  /UsrOs/upsertWithWhere:
    post:
      tags:
        - UsrO
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: UsrO.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
  '/UsrOs/{id}/exists':
    get:
      tags:
        - UsrO
      summary: Check whether a model instance exists in the data source.
      operationId: 'UsrO.exists__get_UsrOs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UsrOs/{id}':
    head:
      tags:
        - UsrO
      summary: Check whether a model instance exists in the data source.
      operationId: 'UsrO.exists__head_UsrOs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UsrO
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UsrO.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
    put:
      tags:
        - UsrO
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UsrO.replaceById__put_UsrOs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
    delete:
      tags:
        - UsrO
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UsrO.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - UsrO
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: UsrO.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: UsrO id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
  '/UsrOs/{id}/replace':
    post:
      tags:
        - UsrO
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UsrO.replaceById__post_UsrOs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
  /UsrOs/findOne:
    get:
      tags:
        - UsrO
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UsrO.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
  /UsrOs/update:
    post:
      tags:
        - UsrO
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UsrO.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrO'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UsrOs/count:
    get:
      tags:
        - UsrO
      summary: Count instances of the model matched by where from the data source.
      operationId: UsrO.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UsrOs/change-stream:
    post:
      tags:
        - UsrO
      summary: Create a change stream.
      operationId: UsrO.createChangeStream__post_UsrOs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - UsrO
      summary: Create a change stream.
      operationId: UsrO.createChangeStream__get_UsrOs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/UsrGs/{id}/usrIs/{fk}':
    get:
      tags:
        - UsrG
      summary: Find a related item by id for usrIs.
      operationId: UsrG.prototype.__findById__usrIs
      parameters:
        - name: id
          in: path
          description: UsrG id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for usrIs
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    delete:
      tags:
        - UsrG
      summary: Delete a related item by id for usrIs.
      operationId: UsrG.prototype.__destroyById__usrIs
      parameters:
        - name: id
          in: path
          description: UsrG id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for usrIs
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - UsrG
      summary: Update a related item by id for usrIs.
      operationId: UsrG.prototype.__updateById__usrIs
      parameters:
        - name: id
          in: path
          description: UsrG id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for usrIs
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  '/UsrGs/{id}/usrO':
    get:
      tags:
        - UsrG
      summary: Fetches belongsTo relation usrO.
      operationId: UsrG.prototype.__get__usrO
      parameters:
        - name: id
          in: path
          description: UsrG id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
  '/UsrGs/{id}/usrIs':
    get:
      tags:
        - UsrG
      summary: Queries usrIs of UsrG.
      operationId: UsrG.prototype.__get__usrIs
      parameters:
        - name: id
          in: path
          description: UsrG id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UsrI'
      deprecated: false
    post:
      tags:
        - UsrG
      summary: Creates a new instance in usrIs of this model.
      operationId: UsrG.prototype.__create__usrIs
      parameters:
        - name: id
          in: path
          description: UsrG id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/UsrI'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
    delete:
      tags:
        - UsrG
      summary: Deletes all usrIs of this model.
      operationId: UsrG.prototype.__delete__usrIs
      parameters:
        - name: id
          in: path
          description: UsrG id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/UsrGs/{id}/usrIs/count':
    get:
      tags:
        - UsrG
      summary: Counts usrIs of UsrG.
      operationId: UsrG.prototype.__count__usrIs
      parameters:
        - name: id
          in: path
          description: UsrG id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UsrGs:
    post:
      tags:
        - UsrG
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UsrG.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
    patch:
      tags:
        - UsrG
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: UsrG.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
    put:
      tags:
        - UsrG
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UsrG.replaceOrCreate__put_UsrGs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
    get:
      tags:
        - UsrG
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UsrG.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UsrG'
      deprecated: false
  /UsrGs/replaceOrCreate:
    post:
      tags:
        - UsrG
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: UsrG.replaceOrCreate__post_UsrGs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
  /UsrGs/upsertWithWhere:
    post:
      tags:
        - UsrG
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: UsrG.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
  '/UsrGs/{id}/exists':
    get:
      tags:
        - UsrG
      summary: Check whether a model instance exists in the data source.
      operationId: 'UsrG.exists__get_UsrGs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UsrGs/{id}':
    head:
      tags:
        - UsrG
      summary: Check whether a model instance exists in the data source.
      operationId: 'UsrG.exists__head_UsrGs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UsrG
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UsrG.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
    put:
      tags:
        - UsrG
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UsrG.replaceById__put_UsrGs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
    delete:
      tags:
        - UsrG
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UsrG.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - UsrG
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: UsrG.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: UsrG id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
  '/UsrGs/{id}/replace':
    post:
      tags:
        - UsrG
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'UsrG.replaceById__post_UsrGs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
  /UsrGs/findOne:
    get:
      tags:
        - UsrG
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UsrG.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrG'
      deprecated: false
  /UsrGs/update:
    post:
      tags:
        - UsrG
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UsrG.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UsrG'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UsrGs/count:
    get:
      tags:
        - UsrG
      summary: Count instances of the model matched by where from the data source.
      operationId: UsrG.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UsrGs/change-stream:
    post:
      tags:
        - UsrG
      summary: Create a change stream.
      operationId: UsrG.createChangeStream__post_UsrGs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - UsrG
      summary: Create a change stream.
      operationId: UsrG.createChangeStream__get_UsrGs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/TagMs/{id}/eBit':
    get:
      tags:
        - TagM
      summary: Fetches belongsTo relation eBit.
      operationId: TagM.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: TagM id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/TagMs/{id}/tagEs/{fk}':
    get:
      tags:
        - TagM
      summary: Find a related item by id for tagEs.
      operationId: TagM.prototype.__findById__tagEs
      parameters:
        - name: id
          in: path
          description: TagM id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for tagEs
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
    delete:
      tags:
        - TagM
      summary: Delete a related item by id for tagEs.
      operationId: TagM.prototype.__destroyById__tagEs
      parameters:
        - name: id
          in: path
          description: TagM id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for tagEs
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - TagM
      summary: Update a related item by id for tagEs.
      operationId: TagM.prototype.__updateById__tagEs
      parameters:
        - name: id
          in: path
          description: TagM id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for tagEs
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
  '/TagMs/{id}/tagEs':
    get:
      tags:
        - TagM
      summary: Queries tagEs of TagM.
      operationId: TagM.prototype.__get__tagEs
      parameters:
        - name: id
          in: path
          description: TagM id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/TagE'
      deprecated: false
    post:
      tags:
        - TagM
      summary: Creates a new instance in tagEs of this model.
      operationId: TagM.prototype.__create__tagEs
      parameters:
        - name: id
          in: path
          description: TagM id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/TagE'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagE'
      deprecated: false
    delete:
      tags:
        - TagM
      summary: Deletes all tagEs of this model.
      operationId: TagM.prototype.__delete__tagEs
      parameters:
        - name: id
          in: path
          description: TagM id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/TagMs/{id}/tagEs/count':
    get:
      tags:
        - TagM
      summary: Counts tagEs of TagM.
      operationId: TagM.prototype.__count__tagEs
      parameters:
        - name: id
          in: path
          description: TagM id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /TagMs:
    post:
      tags:
        - TagM
      summary: Create a new instance of the model and persist it into the data source.
      operationId: TagM.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
    patch:
      tags:
        - TagM
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: TagM.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
    put:
      tags:
        - TagM
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: TagM.replaceOrCreate__put_TagMs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
    get:
      tags:
        - TagM
      summary: Find all instances of the model matched by filter from the data source.
      operationId: TagM.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/TagM'
      deprecated: false
  /TagMs/replaceOrCreate:
    post:
      tags:
        - TagM
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: TagM.replaceOrCreate__post_TagMs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
  /TagMs/upsertWithWhere:
    post:
      tags:
        - TagM
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: TagM.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
  '/TagMs/{id}/exists':
    get:
      tags:
        - TagM
      summary: Check whether a model instance exists in the data source.
      operationId: 'TagM.exists__get_TagMs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/TagMs/{id}':
    head:
      tags:
        - TagM
      summary: Check whether a model instance exists in the data source.
      operationId: 'TagM.exists__head_TagMs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - TagM
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: TagM.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
    put:
      tags:
        - TagM
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'TagM.replaceById__put_TagMs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
    delete:
      tags:
        - TagM
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: TagM.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - TagM
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: TagM.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: TagM id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
  '/TagMs/{id}/replace':
    post:
      tags:
        - TagM
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'TagM.replaceById__post_TagMs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
  /TagMs/findOne:
    get:
      tags:
        - TagM
      summary: Find first instance of the model matched by filter from the data source.
      operationId: TagM.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/TagM'
      deprecated: false
  /TagMs/update:
    post:
      tags:
        - TagM
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: TagM.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/TagM'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /TagMs/count:
    get:
      tags:
        - TagM
      summary: Count instances of the model matched by where from the data source.
      operationId: TagM.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /TagMs/change-stream:
    post:
      tags:
        - TagM
      summary: Create a change stream.
      operationId: TagM.createChangeStream__post_TagMs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - TagM
      summary: Create a change stream.
      operationId: TagM.createChangeStream__get_TagMs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/EBitLogs/{id}/eBit':
    get:
      tags:
        - EBitLog
      summary: Fetches belongsTo relation eBit.
      operationId: EBitLog.prototype.__get__eBit
      parameters:
        - name: id
          in: path
          description: EBitLog id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBit'
      deprecated: false
  '/EBitLogs/{id}/usrI':
    get:
      tags:
        - EBitLog
      summary: Fetches belongsTo relation usrI.
      operationId: EBitLog.prototype.__get__usrI
      parameters:
        - name: id
          in: path
          description: EBitLog id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrI'
      deprecated: false
  '/EBitLogs/{id}/usrO':
    get:
      tags:
        - EBitLog
      summary: Fetches belongsTo relation usrO.
      operationId: EBitLog.prototype.__get__usrO
      parameters:
        - name: id
          in: path
          description: EBitLog id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UsrO'
      deprecated: false
  /EBitLogs:
    post:
      tags:
        - EBitLog
      summary: Create a new instance of the model and persist it into the data source.
      operationId: EBitLog.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    patch:
      tags:
        - EBitLog
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: EBitLog.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    put:
      tags:
        - EBitLog
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: EBitLog.replaceOrCreate__put_EBitLogs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    get:
      tags:
        - EBitLog
      summary: Find all instances of the model matched by filter from the data source.
      operationId: EBitLog.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EBitLog'
      deprecated: false
  /EBitLogs/replaceOrCreate:
    post:
      tags:
        - EBitLog
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: EBitLog.replaceOrCreate__post_EBitLogs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
  /EBitLogs/upsertWithWhere:
    post:
      tags:
        - EBitLog
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: EBitLog.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
  '/EBitLogs/{id}/exists':
    get:
      tags:
        - EBitLog
      summary: Check whether a model instance exists in the data source.
      operationId: 'EBitLog.exists__get_EBitLogs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/EBitLogs/{id}':
    head:
      tags:
        - EBitLog
      summary: Check whether a model instance exists in the data source.
      operationId: 'EBitLog.exists__head_EBitLogs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - EBitLog
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: EBitLog.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    put:
      tags:
        - EBitLog
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'EBitLog.replaceById__put_EBitLogs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
    delete:
      tags:
        - EBitLog
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: EBitLog.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - EBitLog
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: EBitLog.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: EBitLog id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
  '/EBitLogs/{id}/replace':
    post:
      tags:
        - EBitLog
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'EBitLog.replaceById__post_EBitLogs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
  /EBitLogs/findOne:
    get:
      tags:
        - EBitLog
      summary: Find first instance of the model matched by filter from the data source.
      operationId: EBitLog.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EBitLog'
      deprecated: false
  /EBitLogs/update:
    post:
      tags:
        - EBitLog
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: EBitLog.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EBitLog'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /EBitLogs/count:
    get:
      tags:
        - EBitLog
      summary: Count instances of the model matched by where from the data source.
      operationId: EBitLog.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /EBitLogs/change-stream:
    post:
      tags:
        - EBitLog
      summary: Create a change stream.
      operationId: EBitLog.createChangeStream__post_EBitLogs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - EBitLog
      summary: Create a change stream.
      operationId: EBitLog.createChangeStream__get_EBitLogs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
tags:
  - name: Application
  - name: Installation
  - name: Notification
  - name: Container
  - name: UsrI
  - name: UsrIAccessToken
  - name: Push
  - name: EBit
  - name: Lnk2
  - name: TxtE
  - name: PicE
  - name: SndE
  - name: ColE
  - name: TagE
  - name: Mssg
  - name: FrmlM
  - name: FrmlI
  - name: UsrO
  - name: UsrG
  - name: TagM
  - name: EBitLog
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  Application:
    properties:
      id:
        type: string
      realm:
        type: string
      name:
        type: string
      description:
        type: string
      icon:
        description: The icon image url
        type: string
      owner:
        description: The user id of the developer who registers the application
        type: string
      collaborators:
        description: A list of users ids who have permissions to work on this app
        type: array
        items:
          type: string
      email:
        type: string
      emailVerified:
        type: boolean
      url:
        description: The application URL for OAuth 2.0
        type: string
      callbackUrls:
        description: OAuth 2.0 code/token callback URLs
        type: array
        items:
          type: string
      permissions:
        description: A list of permissions required by the application
        type: array
        items:
          type: string
      clientKey:
        type: string
      javaScriptKey:
        type: string
      restApiKey:
        type: string
      windowsKey:
        type: string
      masterKey:
        type: string
      pushSettings:
        $ref: '#/definitions/x-any'
      authenticationEnabled:
        default: true
        type: boolean
      anonymousAllowed:
        default: true
        type: boolean
      authenticationSchemes:
        type: array
        items:
          $ref: '#/definitions/x-any'
      status:
        default: sandbox
        description: 'Status of the application, production/sandbox/disabled'
        type: string
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
    required:
      - id
      - name
    additionalProperties: false
  x-any:
    properties: {}
  Installation:
    properties:
      appId:
        type: string
      appVersion:
        type: string
      badge:
        type: number
        format: double
      created:
        type: string
        format: date-time
      deviceToken:
        type: string
      deviceType:
        type: string
      modified:
        type: string
        format: date-time
      status:
        type: string
      subscriptions:
        type: array
        items:
          type: string
      timeZone:
        type: string
      userId:
        type: string
      id:
        type: number
        format: double
    required:
      - appId
      - deviceToken
      - deviceType
    additionalProperties: false
  Notification:
    properties:
      alert:
        $ref: '#/definitions/x-any'
      badge:
        type: number
        format: double
      category:
        type: string
      collapseKey:
        type: string
      contentAvailable:
        type: boolean
      created:
        type: string
        format: date-time
      delayWhileIdle:
        type: boolean
      deviceToken:
        type: string
      deviceType:
        type: string
      expirationInterval:
        type: number
        format: double
      expirationTime:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
      scheduledTime:
        type: string
        format: date-time
      sound:
        type: string
      status:
        type: string
      urlArgs:
        type: array
        items:
          type: string
      id:
        type: number
        format: double
    required:
      - deviceToken
      - deviceType
    additionalProperties: false
  Role:
    properties:
      id:
        type: number
        format: double
      name:
        type: string
      description:
        type: string
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
    required:
      - name
    additionalProperties: false
  RoleMapping:
    description: Map principals to roles
    properties:
      id:
        type: number
        format: double
      principalType:
        description: >-
          The principal type, such as USER, APPLICATION, ROLE, or user model
          name in case of multiple user models
        type: string
      principalId:
        type: string
      roleId:
        type: number
        format: double
    additionalProperties: false
  UsrIAccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - id
    additionalProperties: false
  EBit:
    properties:
      title:
        type: string
      description:
        type: string
      kind:
        type: string
      status:
        type: string
      popularite:
        type: number
        format: double
      partages:
        type: number
        format: double
      fiabilite:
        type: number
        format: double
      interactedAt:
        type: string
        format: date-time
      id:
        type: number
        format: double
      usrIId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      usrOId:
        type: number
        format: double
    additionalProperties: false
  Mssg:
    properties:
      kind:
        type: string
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      toUsrIId:
        type: number
        format: double
      fromUsrIId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  UsrO:
    properties:
      name:
        type: string
      nom:
        type: string
      prenom:
        type: string
      type:
        type: string
      address:
        type: string
      mail:
        type: string
      commentaire:
        type: string
      nbrEmployes:
        type: number
        format: double
      nbrPartenaires:
        type: number
        format: double
      nbrAssocies:
        type: number
        format: double
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  UsrG:
    properties:
      name:
        type: string
      id:
        type: number
        format: double
      usrOId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  EBitLog:
    properties:
      method:
        type: string
      right:
        type: string
      outcome:
        type: string
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      usrIId:
        type: number
        format: double
      usrOId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  UsrI:
    properties:
      nom:
        type: string
      prenom:
        type: string
      status:
        type: string
      sim:
        type: string
      poste:
        type: string
      service:
        type: string
      portable:
        type: string
      commentaire:
        type: string
      subcription:
        type: string
        format: date-time
      canal:
        type: string
      date:
        type: string
        format: date-time
      companySecondaire:
        type: string
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      eBitId:
        type: number
        format: double
      usrOId:
        type: number
        format: double
      usrGId:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  Push:
    properties:
      id:
        type: number
        format: double
    additionalProperties: false
  Lnk2:
    properties:
      parentKind:
        type: string
      childKind:
        type: string
      kind:
        type: string
      keyword:
        type: string
      location:
        $ref: '#/definitions/GeoPoint'
      altitude:
        type: number
        format: double
      order1:
        type: number
        format: double
      order2:
        type: number
        format: double
      order3:
        type: number
        format: double
      right:
        type: string
      access:
        type: string
      meta:
        type: object
      etat:
        type: boolean
      id:
        type: number
        format: double
      parentId:
        type: number
        format: double
      childId:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  TxtE:
    properties:
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  PicE:
    properties:
      width:
        type: number
        format: double
      height:
        type: number
        format: double
      path:
        type: string
      extension:
        type: string
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  SndE:
    properties:
      length:
        type: number
        format: double
      flags:
        type: array
        items:
          type: number
          format: double
      path:
        type: string
      extension:
        type: string
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  ColE:
    properties:
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  TagE:
    properties:
      kind:
        type: string
      name:
        type: string
      fields:
        type: array
        items:
          type: object
      fonction:
        type: string
      program:
        type: string
      consequence:
        type: string
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      tagMId:
        type: number
        format: double
    additionalProperties: false
  FrmlM:
    properties:
      forms:
        type: array
        items:
          type: object
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  FrmlI:
    properties:
      forms:
        type: array
        items:
          type: object
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      frmlMId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  TagM:
    properties:
      kind:
        type: string
      id:
        type: number
        format: double
      eBitId:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  Container:
    properties:
      id:
        type: number
        format: double
      txtEId:
        type: number
        format: double
    additionalProperties: false
  GeoPoint:
    properties:
      lat:
        type: number
      lng:
        type: number
