//
// Application.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Application: Codable {

    public var id: String
    public var realm: String?
    public var name: String
    public var description: String?
    /** The icon image url */
    public var icon: String?
    /** The user id of the developer who registers the application */
    public var owner: String?
    /** A list of users ids who have permissions to work on this app */
    public var collaborators: [String]?
    public var email: String?
    public var emailVerified: Bool?
    /** The application URL for OAuth 2.0 */
    public var url: String?
    /** OAuth 2.0 code/token callback URLs */
    public var callbackUrls: [String]?
    /** A list of permissions required by the application */
    public var permissions: [String]?
    public var clientKey: String?
    public var javaScriptKey: String?
    public var restApiKey: String?
    public var windowsKey: String?
    public var masterKey: String?
    public var pushSettings: XAny?
    public var authenticationEnabled: Bool?
    public var anonymousAllowed: Bool?
    public var authenticationSchemes: [XAny]?
    /** Status of the application, production/sandbox/disabled */
    public var status: String?
    public var created: Date?
    public var modified: Date?


    
    public init(id: String, realm: String? = nil, name: String, description: String? = nil, icon: String? = nil, owner: String? = nil, collaborators: [String]? = nil, email: String? = nil, emailVerified: Bool? = nil, url: String? = nil, callbackUrls: [String]? = nil, permissions: [String]? = nil, clientKey: String? = nil, javaScriptKey: String? = nil, restApiKey: String? = nil, windowsKey: String? = nil, masterKey: String? = nil, pushSettings: XAny? = nil, authenticationEnabled: Bool? = nil, anonymousAllowed: Bool? = nil, authenticationSchemes: [XAny]? = nil, status: String? = nil, created: Date? = nil, modified: Date? = nil) {
        self.id = id
        self.realm = realm
        self.name = name
        self.description = description
        self.icon = icon
        self.owner = owner
        self.collaborators = collaborators
        self.email = email
        self.emailVerified = emailVerified
        self.url = url
        self.callbackUrls = callbackUrls
        self.permissions = permissions
        self.clientKey = clientKey
        self.javaScriptKey = javaScriptKey
        self.restApiKey = restApiKey
        self.windowsKey = windowsKey
        self.masterKey = masterKey
        self.pushSettings = pushSettings
        self.authenticationEnabled = authenticationEnabled
        self.anonymousAllowed = anonymousAllowed
        self.authenticationSchemes = authenticationSchemes
        self.status = status
        self.created = created
        self.modified = modified
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(id, forKey: "id")
        try container.encodeIfPresent(realm, forKey: "realm")
        try container.encode(name, forKey: "name")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(icon, forKey: "icon")
        try container.encodeIfPresent(owner, forKey: "owner")
        try container.encodeIfPresent(collaborators, forKey: "collaborators")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(emailVerified, forKey: "emailVerified")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(callbackUrls, forKey: "callbackUrls")
        try container.encodeIfPresent(permissions, forKey: "permissions")
        try container.encodeIfPresent(clientKey, forKey: "clientKey")
        try container.encodeIfPresent(javaScriptKey, forKey: "javaScriptKey")
        try container.encodeIfPresent(restApiKey, forKey: "restApiKey")
        try container.encodeIfPresent(windowsKey, forKey: "windowsKey")
        try container.encodeIfPresent(masterKey, forKey: "masterKey")
        try container.encodeIfPresent(pushSettings, forKey: "pushSettings")
        try container.encodeIfPresent(authenticationEnabled, forKey: "authenticationEnabled")
        try container.encodeIfPresent(anonymousAllowed, forKey: "anonymousAllowed")
        try container.encodeIfPresent(authenticationSchemes, forKey: "authenticationSchemes")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(created, forKey: "created")
        try container.encodeIfPresent(modified, forKey: "modified")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decode(String.self, forKey: "id")
        realm = try container.decodeIfPresent(String.self, forKey: "realm")
        name = try container.decode(String.self, forKey: "name")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        icon = try container.decodeIfPresent(String.self, forKey: "icon")
        owner = try container.decodeIfPresent(String.self, forKey: "owner")
        collaborators = try container.decodeIfPresent([String].self, forKey: "collaborators")
        email = try container.decodeIfPresent(String.self, forKey: "email")
        emailVerified = try container.decodeIfPresent(Bool.self, forKey: "emailVerified")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        callbackUrls = try container.decodeIfPresent([String].self, forKey: "callbackUrls")
        permissions = try container.decodeIfPresent([String].self, forKey: "permissions")
        clientKey = try container.decodeIfPresent(String.self, forKey: "clientKey")
        javaScriptKey = try container.decodeIfPresent(String.self, forKey: "javaScriptKey")
        restApiKey = try container.decodeIfPresent(String.self, forKey: "restApiKey")
        windowsKey = try container.decodeIfPresent(String.self, forKey: "windowsKey")
        masterKey = try container.decodeIfPresent(String.self, forKey: "masterKey")
        pushSettings = try container.decodeIfPresent(XAny.self, forKey: "pushSettings")
        authenticationEnabled = try container.decodeIfPresent(Bool.self, forKey: "authenticationEnabled")
        anonymousAllowed = try container.decodeIfPresent(Bool.self, forKey: "anonymousAllowed")
        authenticationSchemes = try container.decodeIfPresent([XAny].self, forKey: "authenticationSchemes")
        status = try container.decodeIfPresent(String.self, forKey: "status")
        created = try container.decodeIfPresent(Date.self, forKey: "created")
        modified = try container.decodeIfPresent(Date.self, forKey: "modified")
    }
}

