//
// Account.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Account: Codable {

    public var address: String?
    public var phone: String?
    public var kind: String?
    public var role: String?
    public var status: String?
    public var realm: String?
    public var username: String?
    public var email: String
    public var emailVerified: Bool?
    public var id: Double?
    public var createdAt: Date?
    public var updatedAt: Date?


    
    public init(address: String? = nil, phone: String? = nil, kind: String? = nil, role: String? = nil, status: String? = nil, realm: String? = nil, username: String? = nil, email: String, emailVerified: Bool? = nil, id: Double? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.address = address
        self.phone = phone
        self.kind = kind
        self.role = role
        self.status = status
        self.realm = realm
        self.username = username
        self.email = email
        self.emailVerified = emailVerified
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(phone, forKey: "phone")
        try container.encodeIfPresent(kind, forKey: "kind")
        try container.encodeIfPresent(role, forKey: "role")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(realm, forKey: "realm")
        try container.encodeIfPresent(username, forKey: "username")
        try container.encode(email, forKey: "email")
        try container.encodeIfPresent(emailVerified, forKey: "emailVerified")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(createdAt, forKey: "createdAt")
        try container.encodeIfPresent(updatedAt, forKey: "updatedAt")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        address = try container.decodeIfPresent(String.self, forKey: "address")
        phone = try container.decodeIfPresent(String.self, forKey: "phone")
        kind = try container.decodeIfPresent(String.self, forKey: "kind")
        role = try container.decodeIfPresent(String.self, forKey: "role")
        status = try container.decodeIfPresent(String.self, forKey: "status")
        realm = try container.decodeIfPresent(String.self, forKey: "realm")
        username = try container.decodeIfPresent(String.self, forKey: "username")
        email = try container.decode(String.self, forKey: "email")
        emailVerified = try container.decodeIfPresent(Bool.self, forKey: "emailVerified")
        id = try container.decodeIfPresent(Double.self, forKey: "id")
        createdAt = try container.decodeIfPresent(Date.self, forKey: "createdAt")
        updatedAt = try container.decodeIfPresent(Date.self, forKey: "updatedAt")
    }
}

