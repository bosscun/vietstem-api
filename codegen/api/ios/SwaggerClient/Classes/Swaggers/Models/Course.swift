//
// Course.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Course: Codable {

    public var name: String?
    public var description: String?
    public var image: String?
    public var url: String?
    public var price: String?
    public var discount: String?
    public var kind: String?
    public var teacher: String?
    public var time: String?
    public var id: Double?
    public var createdAt: Date?
    public var updatedAt: Date?


    
    public init(name: String? = nil, description: String? = nil, image: String? = nil, url: String? = nil, price: String? = nil, discount: String? = nil, kind: String? = nil, teacher: String? = nil, time: String? = nil, id: Double? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.name = name
        self.description = description
        self.image = image
        self.url = url
        self.price = price
        self.discount = discount
        self.kind = kind
        self.teacher = teacher
        self.time = time
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(image, forKey: "image")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(price, forKey: "price")
        try container.encodeIfPresent(discount, forKey: "discount")
        try container.encodeIfPresent(kind, forKey: "kind")
        try container.encodeIfPresent(teacher, forKey: "teacher")
        try container.encodeIfPresent(time, forKey: "time")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(createdAt, forKey: "createdAt")
        try container.encodeIfPresent(updatedAt, forKey: "updatedAt")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        name = try container.decodeIfPresent(String.self, forKey: "name")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        image = try container.decodeIfPresent(String.self, forKey: "image")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        price = try container.decodeIfPresent(String.self, forKey: "price")
        discount = try container.decodeIfPresent(String.self, forKey: "discount")
        kind = try container.decodeIfPresent(String.self, forKey: "kind")
        teacher = try container.decodeIfPresent(String.self, forKey: "teacher")
        time = try container.decodeIfPresent(String.self, forKey: "time")
        id = try container.decodeIfPresent(Double.self, forKey: "id")
        createdAt = try container.decodeIfPresent(Date.self, forKey: "createdAt")
        updatedAt = try container.decodeIfPresent(Date.self, forKey: "updatedAt")
    }
}

