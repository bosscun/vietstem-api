//
// Installation.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Installation: Codable {

    public var appId: String
    public var appVersion: String?
    public var badge: Double?
    public var created: Date?
    public var deviceToken: String
    public var deviceType: String
    public var modified: Date?
    public var status: String?
    public var subscriptions: [String]?
    public var timeZone: String?
    public var userId: String?
    public var id: Double?


    
    public init(appId: String, appVersion: String? = nil, badge: Double? = nil, created: Date? = nil, deviceToken: String, deviceType: String, modified: Date? = nil, status: String? = nil, subscriptions: [String]? = nil, timeZone: String? = nil, userId: String? = nil, id: Double? = nil) {
        self.appId = appId
        self.appVersion = appVersion
        self.badge = badge
        self.created = created
        self.deviceToken = deviceToken
        self.deviceType = deviceType
        self.modified = modified
        self.status = status
        self.subscriptions = subscriptions
        self.timeZone = timeZone
        self.userId = userId
        self.id = id
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(appId, forKey: "appId")
        try container.encodeIfPresent(appVersion, forKey: "appVersion")
        try container.encodeIfPresent(badge, forKey: "badge")
        try container.encodeIfPresent(created, forKey: "created")
        try container.encode(deviceToken, forKey: "deviceToken")
        try container.encode(deviceType, forKey: "deviceType")
        try container.encodeIfPresent(modified, forKey: "modified")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(subscriptions, forKey: "subscriptions")
        try container.encodeIfPresent(timeZone, forKey: "timeZone")
        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encodeIfPresent(id, forKey: "id")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        appId = try container.decode(String.self, forKey: "appId")
        appVersion = try container.decodeIfPresent(String.self, forKey: "appVersion")
        badge = try container.decodeIfPresent(Double.self, forKey: "badge")
        created = try container.decodeIfPresent(Date.self, forKey: "created")
        deviceToken = try container.decode(String.self, forKey: "deviceToken")
        deviceType = try container.decode(String.self, forKey: "deviceType")
        modified = try container.decodeIfPresent(Date.self, forKey: "modified")
        status = try container.decodeIfPresent(String.self, forKey: "status")
        subscriptions = try container.decodeIfPresent([String].self, forKey: "subscriptions")
        timeZone = try container.decodeIfPresent(String.self, forKey: "timeZone")
        userId = try container.decodeIfPresent(String.self, forKey: "userId")
        id = try container.decodeIfPresent(Double.self, forKey: "id")
    }
}

