//
// AccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class AccountAPI {
    /**
     Change a user's password.
     
     - parameter oldPassword: (form)  
     - parameter newPassword: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountChangePassword(oldPassword: String, newPassword: String, completion: @escaping ((_ error: Error?) -> Void)) {
        accountChangePasswordWithRequestBuilder(oldPassword: oldPassword, newPassword: newPassword).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Change a user's password.
     
     - parameter oldPassword: (form)  
     - parameter newPassword: (form)  
     - returns: Observable<Void>
     */
    open class func accountChangePassword(oldPassword: String, newPassword: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountChangePassword(oldPassword: oldPassword, newPassword: newPassword) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Change a user's password.
     - POST /Accounts/change-password
     
     - parameter oldPassword: (form)  
     - parameter newPassword: (form)  

     - returns: RequestBuilder<Void> 
     */
    open class func accountChangePasswordWithRequestBuilder(oldPassword: String, newPassword: String) -> RequestBuilder<Void> {
        let path = "/Accounts/change-password"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "oldPassword": oldPassword,
            "newPassword": newPassword
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirm a user registration with identity verification token.
     
     - parameter uid: (query)  
     - parameter token: (query)  
     - parameter redirect: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountConfirm(uid: String, token: String, redirect: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        accountConfirmWithRequestBuilder(uid: uid, token: token, redirect: redirect).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Confirm a user registration with identity verification token.
     
     - parameter uid: (query)  
     - parameter token: (query)  
     - parameter redirect: (query)  (optional)
     - returns: Observable<Void>
     */
    open class func accountConfirm(uid: String, token: String, redirect: String? = nil) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountConfirm(uid: uid, token: token, redirect: redirect) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Confirm a user registration with identity verification token.
     - GET /Accounts/confirm
     
     - parameter uid: (query)  
     - parameter token: (query)  
     - parameter redirect: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func accountConfirmWithRequestBuilder(uid: String, token: String, redirect: String? = nil) -> RequestBuilder<Void> {
        let path = "/Accounts/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "uid": uid, 
            "token": token, 
            "redirect": redirect
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountCount(_where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        accountCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func accountCount(_where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            accountCount(_where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     - GET /Accounts/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func accountCountWithRequestBuilder(_where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/Accounts/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountCreate(data: Account? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Account>
     */
    open class func accountCreate(data: Account? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Accounts
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountCreateWithRequestBuilder(data: Account? = nil) -> RequestBuilder<Account> {
        let path = "/Accounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountCreateChangeStreamGetAccountsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        accountCreateChangeStreamGetAccountsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - returns: Observable<URL>
     */
    open class func accountCreateChangeStreamGetAccountsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            accountCreateChangeStreamGetAccountsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - GET /Accounts/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func accountCreateChangeStreamGetAccountsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Accounts/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "options": options
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountCreateChangeStreamPostAccountsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        accountCreateChangeStreamPostAccountsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - returns: Observable<URL>
     */
    open class func accountCreateChangeStreamPostAccountsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            accountCreateChangeStreamPostAccountsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - POST /Accounts/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func accountCreateChangeStreamPostAccountsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Accounts/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "options": options
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountDeleteById(id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<Any>
     */
    open class func accountDeleteById(id: String) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            accountDeleteById(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Accounts/{id}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<JSON> 
     */
    open class func accountDeleteByIdWithRequestBuilder(id: String) -> RequestBuilder<JSON> {
        var path = "/Accounts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountExistsGetAccountsidExists(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        accountExistsGetAccountsidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func accountExistsGetAccountsidExists(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            accountExistsGetAccountsidExists(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - GET /Accounts/{id}/exists
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func accountExistsGetAccountsidExistsWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Accounts/{id}/exists"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountExistsHeadAccountsid(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        accountExistsHeadAccountsidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func accountExistsHeadAccountsid(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            accountExistsHeadAccountsid(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - HEAD /Accounts/{id}
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func accountExistsHeadAccountsidWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Accounts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountFind(filter: String? = nil, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        accountFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<[Account]>
     */
    open class func accountFind(filter: String? = nil) -> Observable<[Account]> {
        return Observable.create { observer -> Disposable in
            accountFind(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Accounts
     - examples: [{contentType=application/json, example=[ {
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}, {
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<[Account]> 
     */
    open class func accountFindWithRequestBuilder(filter: String? = nil) -> RequestBuilder<[Account]> {
        let path = "/Accounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[Account]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountFindById(id: String, filter: String? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Account>
     */
    open class func accountFindById(id: String, filter: String? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountFindById(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     - GET /Accounts/{id}
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountFindByIdWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<Account> {
        var path = "/Accounts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountFindOne(filter: String? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Account>
     */
    open class func accountFindOne(filter: String? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountFindOne(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Accounts/findOne
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountFindOneWithRequestBuilder(filter: String? = nil) -> RequestBuilder<Account> {
        let path = "/Accounts/findOne"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Login a user with username/email and password.
     
     - parameter credentials: (body)  
     - parameter include: (query) Related objects to include in the response. See the description of return value for more details. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountLogin(credentials: Any, include: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountLoginWithRequestBuilder(credentials: credentials, include: include).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Login a user with username/email and password.
     
     - parameter credentials: (body)  
     - parameter include: (query) Related objects to include in the response. See the description of return value for more details. (optional)
     - returns: Observable<Any>
     */
    open class func accountLogin(credentials: Any, include: String? = nil) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            accountLogin(credentials: credentials, include: include) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Login a user with username/email and password.
     - POST /Accounts/login
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter credentials: (body)  
     - parameter include: (query) Related objects to include in the response. See the description of return value for more details. (optional)

     - returns: RequestBuilder<JSON> 
     */
    open class func accountLoginWithRequestBuilder(credentials: Any, include: String? = nil) -> RequestBuilder<JSON> {
        let path = "/Accounts/login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: credentials)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "include": include
        ])
        

        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Logout a user with access token.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountLogout(completion: @escaping ((_ error: Error?) -> Void)) {
        accountLogoutWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Logout a user with access token.
     
     - returns: Observable<Void>
     */
    open class func accountLogout() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountLogout() { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Logout a user with access token.
     - POST /Accounts/logout

     - returns: RequestBuilder<Void> 
     */
    open class func accountLogoutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/Accounts/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPatchOrCreate(data: Account? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountPatchOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Account>
     */
    open class func accountPatchOrCreate(data: Account? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountPatchOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Accounts
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountPatchOrCreateWithRequestBuilder(data: Account? = nil) -> RequestBuilder<Account> {
        let path = "/Accounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Counts accessTokens of Account.
     
     - parameter id: (path) Account id 
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeCountAccessTokens(id: String, _where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        accountPrototypeCountAccessTokensWithRequestBuilder(id: id, _where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Counts accessTokens of Account.
     
     - parameter id: (path) Account id 
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func accountPrototypeCountAccessTokens(id: String, _where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            accountPrototypeCountAccessTokens(id: id, _where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Counts accessTokens of Account.
     - GET /Accounts/{id}/accessTokens/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter id: (path) Account id 
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func accountPrototypeCountAccessTokensWithRequestBuilder(id: String, _where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        var path = "/Accounts/{id}/accessTokens/count"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Counts roles of Account.
     
     - parameter id: (path) Account id 
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeCountRoles(id: String, _where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        accountPrototypeCountRolesWithRequestBuilder(id: id, _where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Counts roles of Account.
     
     - parameter id: (path) Account id 
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func accountPrototypeCountRoles(id: String, _where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            accountPrototypeCountRoles(id: id, _where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Counts roles of Account.
     - GET /Accounts/{id}/roles/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter id: (path) Account id 
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func accountPrototypeCountRolesWithRequestBuilder(id: String, _where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        var path = "/Accounts/{id}/roles/count"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates a new instance in accessTokens of this model.
     
     - parameter id: (path) Account id 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeCreateAccessTokens(id: String, data: AccountAccessToken? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountPrototypeCreateAccessTokensWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Creates a new instance in accessTokens of this model.
     
     - parameter id: (path) Account id 
     - parameter data: (body)  (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountPrototypeCreateAccessTokens(id: String, data: AccountAccessToken? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountPrototypeCreateAccessTokens(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Creates a new instance in accessTokens of this model.
     - POST /Accounts/{id}/accessTokens
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter id: (path) Account id 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountPrototypeCreateAccessTokensWithRequestBuilder(id: String, data: AccountAccessToken? = nil) -> RequestBuilder<AccountAccessToken> {
        var path = "/Accounts/{id}/accessTokens"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Creates a new instance in roles of this model.
     
     - parameter id: (path) Account id 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeCreateRoles(id: String, data: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        accountPrototypeCreateRolesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Creates a new instance in roles of this model.
     
     - parameter id: (path) Account id 
     - parameter data: (body)  (optional)
     - returns: Observable<Role>
     */
    open class func accountPrototypeCreateRoles(id: String, data: Role? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            accountPrototypeCreateRoles(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Creates a new instance in roles of this model.
     - POST /Accounts/{id}/roles
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter id: (path) Account id 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func accountPrototypeCreateRolesWithRequestBuilder(id: String, data: Role? = nil) -> RequestBuilder<Role> {
        var path = "/Accounts/{id}/roles"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deletes all accessTokens of this model.
     
     - parameter id: (path) Account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeDeleteAccessTokens(id: String, completion: @escaping ((_ error: Error?) -> Void)) {
        accountPrototypeDeleteAccessTokensWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Deletes all accessTokens of this model.
     
     - parameter id: (path) Account id 
     - returns: Observable<Void>
     */
    open class func accountPrototypeDeleteAccessTokens(id: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountPrototypeDeleteAccessTokens(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Deletes all accessTokens of this model.
     - DELETE /Accounts/{id}/accessTokens
     
     - parameter id: (path) Account id 

     - returns: RequestBuilder<Void> 
     */
    open class func accountPrototypeDeleteAccessTokensWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/Accounts/{id}/accessTokens"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes all roles of this model.
     
     - parameter id: (path) Account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeDeleteRoles(id: String, completion: @escaping ((_ error: Error?) -> Void)) {
        accountPrototypeDeleteRolesWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Deletes all roles of this model.
     
     - parameter id: (path) Account id 
     - returns: Observable<Void>
     */
    open class func accountPrototypeDeleteRoles(id: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountPrototypeDeleteRoles(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Deletes all roles of this model.
     - DELETE /Accounts/{id}/roles
     
     - parameter id: (path) Account id 

     - returns: RequestBuilder<Void> 
     */
    open class func accountPrototypeDeleteRolesWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/Accounts/{id}/roles"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a related item by id for accessTokens.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeDestroyByIdAccessTokens(id: String, fk: String, completion: @escaping ((_ error: Error?) -> Void)) {
        accountPrototypeDestroyByIdAccessTokensWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Delete a related item by id for accessTokens.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for accessTokens 
     - returns: Observable<Void>
     */
    open class func accountPrototypeDestroyByIdAccessTokens(id: String, fk: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountPrototypeDestroyByIdAccessTokens(id: id, fk: fk) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a related item by id for accessTokens.
     - DELETE /Accounts/{id}/accessTokens/{fk}
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for accessTokens 

     - returns: RequestBuilder<Void> 
     */
    open class func accountPrototypeDestroyByIdAccessTokensWithRequestBuilder(id: String, fk: String) -> RequestBuilder<Void> {
        var path = "/Accounts/{id}/accessTokens/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a related item by id for roles.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeDestroyByIdRoles(id: String, fk: String, completion: @escaping ((_ error: Error?) -> Void)) {
        accountPrototypeDestroyByIdRolesWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Delete a related item by id for roles.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - returns: Observable<Void>
     */
    open class func accountPrototypeDestroyByIdRoles(id: String, fk: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountPrototypeDestroyByIdRoles(id: id, fk: fk) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a related item by id for roles.
     - DELETE /Accounts/{id}/roles/{fk}
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 

     - returns: RequestBuilder<Void> 
     */
    open class func accountPrototypeDestroyByIdRolesWithRequestBuilder(id: String, fk: String) -> RequestBuilder<Void> {
        var path = "/Accounts/{id}/roles/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check the existence of roles relation to an item by id.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeExistsRoles(id: String, fk: String, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        accountPrototypeExistsRolesWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check the existence of roles relation to an item by id.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - returns: Observable<Bool>
     */
    open class func accountPrototypeExistsRoles(id: String, fk: String) -> Observable<Bool> {
        return Observable.create { observer -> Disposable in
            accountPrototypeExistsRoles(id: id, fk: fk) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check the existence of roles relation to an item by id.
     - HEAD /Accounts/{id}/roles/rel/{fk}
     - examples: [{contentType=application/json, example=true}]
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 

     - returns: RequestBuilder<Bool> 
     */
    open class func accountPrototypeExistsRolesWithRequestBuilder(id: String, fk: String) -> RequestBuilder<Bool> {
        var path = "/Accounts/{id}/roles/rel/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a related item by id for accessTokens.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeFindByIdAccessTokens(id: String, fk: String, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountPrototypeFindByIdAccessTokensWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a related item by id for accessTokens.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for accessTokens 
     - returns: Observable<AccountAccessToken>
     */
    open class func accountPrototypeFindByIdAccessTokens(id: String, fk: String) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountPrototypeFindByIdAccessTokens(id: id, fk: fk) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a related item by id for accessTokens.
     - GET /Accounts/{id}/accessTokens/{fk}
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for accessTokens 

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountPrototypeFindByIdAccessTokensWithRequestBuilder(id: String, fk: String) -> RequestBuilder<AccountAccessToken> {
        var path = "/Accounts/{id}/accessTokens/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a related item by id for roles.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeFindByIdRoles(id: String, fk: String, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        accountPrototypeFindByIdRolesWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a related item by id for roles.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - returns: Observable<Role>
     */
    open class func accountPrototypeFindByIdRoles(id: String, fk: String) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            accountPrototypeFindByIdRoles(id: id, fk: fk) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a related item by id for roles.
     - GET /Accounts/{id}/roles/{fk}
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 

     - returns: RequestBuilder<Role> 
     */
    open class func accountPrototypeFindByIdRolesWithRequestBuilder(id: String, fk: String) -> RequestBuilder<Role> {
        var path = "/Accounts/{id}/roles/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Queries accessTokens of Account.
     
     - parameter id: (path) Account id 
     - parameter filter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeGetAccessTokens(id: String, filter: String? = nil, completion: @escaping ((_ data: [AccountAccessToken]?,_ error: Error?) -> Void)) {
        accountPrototypeGetAccessTokensWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Queries accessTokens of Account.
     
     - parameter id: (path) Account id 
     - parameter filter: (query)  (optional)
     - returns: Observable<[AccountAccessToken]>
     */
    open class func accountPrototypeGetAccessTokens(id: String, filter: String? = nil) -> Observable<[AccountAccessToken]> {
        return Observable.create { observer -> Disposable in
            accountPrototypeGetAccessTokens(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Queries accessTokens of Account.
     - GET /Accounts/{id}/accessTokens
     - examples: [{contentType=application/json, example=[ {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}, {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
} ]}]
     
     - parameter id: (path) Account id 
     - parameter filter: (query)  (optional)

     - returns: RequestBuilder<[AccountAccessToken]> 
     */
    open class func accountPrototypeGetAccessTokensWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<[AccountAccessToken]> {
        var path = "/Accounts/{id}/accessTokens"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[AccountAccessToken]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Queries roles of Account.
     
     - parameter id: (path) Account id 
     - parameter filter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeGetRoles(id: String, filter: String? = nil, completion: @escaping ((_ data: [Role]?,_ error: Error?) -> Void)) {
        accountPrototypeGetRolesWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Queries roles of Account.
     
     - parameter id: (path) Account id 
     - parameter filter: (query)  (optional)
     - returns: Observable<[Role]>
     */
    open class func accountPrototypeGetRoles(id: String, filter: String? = nil) -> Observable<[Role]> {
        return Observable.create { observer -> Disposable in
            accountPrototypeGetRoles(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Queries roles of Account.
     - GET /Accounts/{id}/roles
     - examples: [{contentType=application/json, example=[ {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}, {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
} ]}]
     
     - parameter id: (path) Account id 
     - parameter filter: (query)  (optional)

     - returns: RequestBuilder<[Role]> 
     */
    open class func accountPrototypeGetRolesWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<[Role]> {
        var path = "/Accounts/{id}/roles"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[Role]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a related item by id for roles.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeLinkRoles(id: String, fk: String, data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        accountPrototypeLinkRolesWithRequestBuilder(id: id, fk: fk, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Add a related item by id for roles.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - parameter data: (body)  (optional)
     - returns: Observable<RoleMapping>
     */
    open class func accountPrototypeLinkRoles(id: String, fk: String, data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            accountPrototypeLinkRoles(id: id, fk: fk, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Add a related item by id for roles.
     - PUT /Accounts/{id}/roles/rel/{fk}
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func accountPrototypeLinkRolesWithRequestBuilder(id: String, fk: String, data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        var path = "/Accounts/{id}/roles/rel/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Account id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypePatchAttributes(id: String, data: Account? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountPrototypePatchAttributesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Account id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Account>
     */
    open class func accountPrototypePatchAttributes(id: String, data: Account? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountPrototypePatchAttributes(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Accounts/{id}
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Account id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountPrototypePatchAttributesWithRequestBuilder(id: String, data: Account? = nil) -> RequestBuilder<Account> {
        var path = "/Accounts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove the roles relation to an item by id.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeUnlinkRoles(id: String, fk: String, completion: @escaping ((_ error: Error?) -> Void)) {
        accountPrototypeUnlinkRolesWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Remove the roles relation to an item by id.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - returns: Observable<Void>
     */
    open class func accountPrototypeUnlinkRoles(id: String, fk: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountPrototypeUnlinkRoles(id: id, fk: fk) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Remove the roles relation to an item by id.
     - DELETE /Accounts/{id}/roles/rel/{fk}
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 

     - returns: RequestBuilder<Void> 
     */
    open class func accountPrototypeUnlinkRolesWithRequestBuilder(id: String, fk: String) -> RequestBuilder<Void> {
        var path = "/Accounts/{id}/roles/rel/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a related item by id for accessTokens.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeUpdateByIdAccessTokens(id: String, fk: String, data: AccountAccessToken? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountPrototypeUpdateByIdAccessTokensWithRequestBuilder(id: id, fk: fk, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update a related item by id for accessTokens.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter data: (body)  (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountPrototypeUpdateByIdAccessTokens(id: String, fk: String, data: AccountAccessToken? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountPrototypeUpdateByIdAccessTokens(id: id, fk: fk, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update a related item by id for accessTokens.
     - PUT /Accounts/{id}/accessTokens/{fk}
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for accessTokens 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountPrototypeUpdateByIdAccessTokensWithRequestBuilder(id: String, fk: String, data: AccountAccessToken? = nil) -> RequestBuilder<AccountAccessToken> {
        var path = "/Accounts/{id}/accessTokens/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a related item by id for roles.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeUpdateByIdRoles(id: String, fk: String, data: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        accountPrototypeUpdateByIdRolesWithRequestBuilder(id: id, fk: fk, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update a related item by id for roles.
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - parameter data: (body)  (optional)
     - returns: Observable<Role>
     */
    open class func accountPrototypeUpdateByIdRoles(id: String, fk: String, data: Role? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            accountPrototypeUpdateByIdRoles(id: id, fk: fk, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update a related item by id for roles.
     - PUT /Accounts/{id}/roles/{fk}
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter id: (path) Account id 
     - parameter fk: (path) Foreign key for roles 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func accountPrototypeUpdateByIdRolesWithRequestBuilder(id: String, fk: String, data: Role? = nil) -> RequestBuilder<Role> {
        var path = "/Accounts/{id}/roles/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Trigger user's identity verification with configured verifyOptions
     
     - parameter id: (path) Account id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPrototypeVerify(id: String, completion: @escaping ((_ error: Error?) -> Void)) {
        accountPrototypeVerifyWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Trigger user's identity verification with configured verifyOptions
     
     - parameter id: (path) Account id 
     - returns: Observable<Void>
     */
    open class func accountPrototypeVerify(id: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountPrototypeVerify(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Trigger user's identity verification with configured verifyOptions
     - POST /Accounts/{id}/verify
     
     - parameter id: (path) Account id 

     - returns: RequestBuilder<Void> 
     */
    open class func accountPrototypeVerifyWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/Accounts/{id}/verify"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountReplaceByIdPostAccountsidReplace(id: String, data: Account? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountReplaceByIdPostAccountsidReplaceWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Account>
     */
    open class func accountReplaceByIdPostAccountsidReplace(id: String, data: Account? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountReplaceByIdPostAccountsidReplace(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Accounts/{id}/replace
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountReplaceByIdPostAccountsidReplaceWithRequestBuilder(id: String, data: Account? = nil) -> RequestBuilder<Account> {
        var path = "/Accounts/{id}/replace"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountReplaceByIdPutAccountsid(id: String, data: Account? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountReplaceByIdPutAccountsidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Account>
     */
    open class func accountReplaceByIdPutAccountsid(id: String, data: Account? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountReplaceByIdPutAccountsid(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - PUT /Accounts/{id}
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountReplaceByIdPutAccountsidWithRequestBuilder(id: String, data: Account? = nil) -> RequestBuilder<Account> {
        var path = "/Accounts/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountReplaceOrCreatePostAccountsReplaceOrCreate(data: Account? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountReplaceOrCreatePostAccountsReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Account>
     */
    open class func accountReplaceOrCreatePostAccountsReplaceOrCreate(data: Account? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountReplaceOrCreatePostAccountsReplaceOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Accounts/replaceOrCreate
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountReplaceOrCreatePostAccountsReplaceOrCreateWithRequestBuilder(data: Account? = nil) -> RequestBuilder<Account> {
        let path = "/Accounts/replaceOrCreate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountReplaceOrCreatePutAccounts(data: Account? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountReplaceOrCreatePutAccountsWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Account>
     */
    open class func accountReplaceOrCreatePutAccounts(data: Account? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountReplaceOrCreatePutAccounts(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - PUT /Accounts
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountReplaceOrCreatePutAccountsWithRequestBuilder(data: Account? = nil) -> RequestBuilder<Account> {
        let path = "/Accounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reset password for a user with email.
     
     - parameter options: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountResetPassword(options: JSON, completion: @escaping ((_ error: Error?) -> Void)) {
        accountResetPasswordWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Reset password for a user with email.
     
     - parameter options: (body)  
     - returns: Observable<Void>
     */
    open class func accountResetPassword(options: JSON) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountResetPassword(options: options) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Reset password for a user with email.
     - POST /Accounts/reset
     
     - parameter options: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func accountResetPasswordWithRequestBuilder(options: JSON) -> RequestBuilder<Void> {
        let path = "/Accounts/reset"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: options)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reset user's password via a password-reset token.
     
     - parameter newPassword: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountSetPassword(newPassword: String, completion: @escaping ((_ error: Error?) -> Void)) {
        accountSetPasswordWithRequestBuilder(newPassword: newPassword).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Reset user's password via a password-reset token.
     
     - parameter newPassword: (form)  
     - returns: Observable<Void>
     */
    open class func accountSetPassword(newPassword: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accountSetPassword(newPassword: newPassword) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Reset user's password via a password-reset token.
     - POST /Accounts/reset-password
     
     - parameter newPassword: (form)  

     - returns: RequestBuilder<Void> 
     */
    open class func accountSetPasswordWithRequestBuilder(newPassword: String) -> RequestBuilder<Void> {
        let path = "/Accounts/reset-password"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "newPassword": newPassword
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountUpdateAll(_where: String? = nil, data: Account? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        accountUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<InlineResponse2001>
     */
    open class func accountUpdateAll(_where: String? = nil, data: Account? = nil) -> Observable<InlineResponse2001> {
        return Observable.create { observer -> Disposable in
            accountUpdateAll(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Accounts/update
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func accountUpdateAllWithRequestBuilder(_where: String? = nil, data: Account? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/Accounts/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountUpsertWithWhere(_where: String? = nil, data: Account? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Account>
     */
    open class func accountUpsertWithWhere(_where: String? = nil, data: Account? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountUpsertWithWhere(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Accounts/upsertWithWhere
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountUpsertWithWhereWithRequestBuilder(_where: String? = nil, data: Account? = nil) -> RequestBuilder<Account> {
        let path = "/Accounts/upsertWithWhere"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
