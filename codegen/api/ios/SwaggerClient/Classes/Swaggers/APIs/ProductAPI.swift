//
// ProductAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class ProductAPI {
    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productCount(_where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        productCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func productCount(_where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            productCount(_where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     - GET /Products/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func productCountWithRequestBuilder(_where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/Products/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productCreate(data: Product? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        productCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Product>
     */
    open class func productCreate(data: Product? = nil) -> Observable<Product> {
        return Observable.create { observer -> Disposable in
            productCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Products
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func productCreateWithRequestBuilder(data: Product? = nil) -> RequestBuilder<Product> {
        let path = "/Products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productCreateChangeStreamGetProductsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        productCreateChangeStreamGetProductsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - returns: Observable<URL>
     */
    open class func productCreateChangeStreamGetProductsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            productCreateChangeStreamGetProductsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - GET /Products/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func productCreateChangeStreamGetProductsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Products/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "options": options
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productCreateChangeStreamPostProductsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        productCreateChangeStreamPostProductsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - returns: Observable<URL>
     */
    open class func productCreateChangeStreamPostProductsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            productCreateChangeStreamPostProductsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - POST /Products/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func productCreateChangeStreamPostProductsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Products/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "options": options
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productDeleteById(id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        productDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<Any>
     */
    open class func productDeleteById(id: String) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            productDeleteById(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Products/{id}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<JSON> 
     */
    open class func productDeleteByIdWithRequestBuilder(id: String) -> RequestBuilder<JSON> {
        var path = "/Products/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productExistsGetProductsidExists(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        productExistsGetProductsidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func productExistsGetProductsidExists(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            productExistsGetProductsidExists(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - GET /Products/{id}/exists
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func productExistsGetProductsidExistsWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Products/{id}/exists"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productExistsHeadProductsid(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        productExistsHeadProductsidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func productExistsHeadProductsid(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            productExistsHeadProductsid(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - HEAD /Products/{id}
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func productExistsHeadProductsidWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Products/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productFind(filter: String? = nil, completion: @escaping ((_ data: [Product]?,_ error: Error?) -> Void)) {
        productFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<[Product]>
     */
    open class func productFind(filter: String? = nil) -> Observable<[Product]> {
        return Observable.create { observer -> Disposable in
            productFind(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Products
     - examples: [{contentType=application/json, example=[ {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}, {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<[Product]> 
     */
    open class func productFindWithRequestBuilder(filter: String? = nil) -> RequestBuilder<[Product]> {
        let path = "/Products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[Product]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productFindById(id: String, filter: String? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        productFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Product>
     */
    open class func productFindById(id: String, filter: String? = nil) -> Observable<Product> {
        return Observable.create { observer -> Disposable in
            productFindById(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     - GET /Products/{id}
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func productFindByIdWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<Product> {
        var path = "/Products/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productFindOne(filter: String? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        productFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Product>
     */
    open class func productFindOne(filter: String? = nil) -> Observable<Product> {
        return Observable.create { observer -> Disposable in
            productFindOne(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Products/findOne
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func productFindOneWithRequestBuilder(filter: String? = nil) -> RequestBuilder<Product> {
        let path = "/Products/findOne"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productPatchOrCreate(data: Product? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        productPatchOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Product>
     */
    open class func productPatchOrCreate(data: Product? = nil) -> Observable<Product> {
        return Observable.create { observer -> Disposable in
            productPatchOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Products
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func productPatchOrCreateWithRequestBuilder(data: Product? = nil) -> RequestBuilder<Product> {
        let path = "/Products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Product id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productPrototypePatchAttributes(id: String, data: Product? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        productPrototypePatchAttributesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Product id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Product>
     */
    open class func productPrototypePatchAttributes(id: String, data: Product? = nil) -> Observable<Product> {
        return Observable.create { observer -> Disposable in
            productPrototypePatchAttributes(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Products/{id}
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Product id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func productPrototypePatchAttributesWithRequestBuilder(id: String, data: Product? = nil) -> RequestBuilder<Product> {
        var path = "/Products/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productReplaceByIdPostProductsidReplace(id: String, data: Product? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        productReplaceByIdPostProductsidReplaceWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Product>
     */
    open class func productReplaceByIdPostProductsidReplace(id: String, data: Product? = nil) -> Observable<Product> {
        return Observable.create { observer -> Disposable in
            productReplaceByIdPostProductsidReplace(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Products/{id}/replace
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func productReplaceByIdPostProductsidReplaceWithRequestBuilder(id: String, data: Product? = nil) -> RequestBuilder<Product> {
        var path = "/Products/{id}/replace"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productReplaceByIdPutProductsid(id: String, data: Product? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        productReplaceByIdPutProductsidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Product>
     */
    open class func productReplaceByIdPutProductsid(id: String, data: Product? = nil) -> Observable<Product> {
        return Observable.create { observer -> Disposable in
            productReplaceByIdPutProductsid(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - PUT /Products/{id}
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func productReplaceByIdPutProductsidWithRequestBuilder(id: String, data: Product? = nil) -> RequestBuilder<Product> {
        var path = "/Products/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productReplaceOrCreatePostProductsReplaceOrCreate(data: Product? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        productReplaceOrCreatePostProductsReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Product>
     */
    open class func productReplaceOrCreatePostProductsReplaceOrCreate(data: Product? = nil) -> Observable<Product> {
        return Observable.create { observer -> Disposable in
            productReplaceOrCreatePostProductsReplaceOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Products/replaceOrCreate
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func productReplaceOrCreatePostProductsReplaceOrCreateWithRequestBuilder(data: Product? = nil) -> RequestBuilder<Product> {
        let path = "/Products/replaceOrCreate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productReplaceOrCreatePutProducts(data: Product? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        productReplaceOrCreatePutProductsWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Product>
     */
    open class func productReplaceOrCreatePutProducts(data: Product? = nil) -> Observable<Product> {
        return Observable.create { observer -> Disposable in
            productReplaceOrCreatePutProducts(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - PUT /Products
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func productReplaceOrCreatePutProductsWithRequestBuilder(data: Product? = nil) -> RequestBuilder<Product> {
        let path = "/Products"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productUpdateAll(_where: String? = nil, data: Product? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        productUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<InlineResponse2001>
     */
    open class func productUpdateAll(_where: String? = nil, data: Product? = nil) -> Observable<InlineResponse2001> {
        return Observable.create { observer -> Disposable in
            productUpdateAll(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Products/update
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func productUpdateAllWithRequestBuilder(_where: String? = nil, data: Product? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/Products/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func productUpsertWithWhere(_where: String? = nil, data: Product? = nil, completion: @escaping ((_ data: Product?,_ error: Error?) -> Void)) {
        productUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Product>
     */
    open class func productUpsertWithWhere(_where: String? = nil, data: Product? = nil) -> Observable<Product> {
        return Observable.create { observer -> Disposable in
            productUpsertWithWhere(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Products/upsertWithWhere
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "feature" : "feature",
  "kind" : "kind",
  "price" : "price",
  "name" : "name",
  "discount" : 0.8008281904610115,
  "id" : 6.027456183070403,
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Product> 
     */
    open class func productUpsertWithWhereWithRequestBuilder(_where: String? = nil, data: Product? = nil) -> RequestBuilder<Product> {
        let path = "/Products/upsertWithWhere"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<Product>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
