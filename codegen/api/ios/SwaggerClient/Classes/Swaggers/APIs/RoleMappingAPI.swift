//
// RoleMappingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class RoleMappingAPI {
    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingCount(_where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        roleMappingCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func roleMappingCount(_where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            roleMappingCount(_where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     - GET /RoleMappings/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func roleMappingCountWithRequestBuilder(_where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/RoleMappings/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingCreate(data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        roleMappingCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<RoleMapping>
     */
    open class func roleMappingCreate(data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            roleMappingCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     - POST /RoleMappings
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func roleMappingCreateWithRequestBuilder(data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        let path = "/RoleMappings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingCreateChangeStreamGetRoleMappingsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        roleMappingCreateChangeStreamGetRoleMappingsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - returns: Observable<URL>
     */
    open class func roleMappingCreateChangeStreamGetRoleMappingsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            roleMappingCreateChangeStreamGetRoleMappingsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - GET /RoleMappings/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func roleMappingCreateChangeStreamGetRoleMappingsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/RoleMappings/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "options": options
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingCreateChangeStreamPostRoleMappingsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        roleMappingCreateChangeStreamPostRoleMappingsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - returns: Observable<URL>
     */
    open class func roleMappingCreateChangeStreamPostRoleMappingsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            roleMappingCreateChangeStreamPostRoleMappingsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - POST /RoleMappings/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func roleMappingCreateChangeStreamPostRoleMappingsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/RoleMappings/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "options": options
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingDeleteById(id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        roleMappingDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<Any>
     */
    open class func roleMappingDeleteById(id: String) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            roleMappingDeleteById(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /RoleMappings/{id}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<JSON> 
     */
    open class func roleMappingDeleteByIdWithRequestBuilder(id: String) -> RequestBuilder<JSON> {
        var path = "/RoleMappings/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingExistsGetRoleMappingsidExists(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        roleMappingExistsGetRoleMappingsidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func roleMappingExistsGetRoleMappingsidExists(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            roleMappingExistsGetRoleMappingsidExists(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - GET /RoleMappings/{id}/exists
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func roleMappingExistsGetRoleMappingsidExistsWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/RoleMappings/{id}/exists"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingExistsHeadRoleMappingsid(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        roleMappingExistsHeadRoleMappingsidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func roleMappingExistsHeadRoleMappingsid(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            roleMappingExistsHeadRoleMappingsid(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - HEAD /RoleMappings/{id}
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func roleMappingExistsHeadRoleMappingsidWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/RoleMappings/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingFind(filter: String? = nil, completion: @escaping ((_ data: [RoleMapping]?,_ error: Error?) -> Void)) {
        roleMappingFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<[RoleMapping]>
     */
    open class func roleMappingFind(filter: String? = nil) -> Observable<[RoleMapping]> {
        return Observable.create { observer -> Disposable in
            roleMappingFind(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     - GET /RoleMappings
     - examples: [{contentType=application/json, example=[ {
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}, {
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<[RoleMapping]> 
     */
    open class func roleMappingFindWithRequestBuilder(filter: String? = nil) -> RequestBuilder<[RoleMapping]> {
        let path = "/RoleMappings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[RoleMapping]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingFindById(id: String, filter: String? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        roleMappingFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<RoleMapping>
     */
    open class func roleMappingFindById(id: String, filter: String? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            roleMappingFindById(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     - GET /RoleMappings/{id}
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func roleMappingFindByIdWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<RoleMapping> {
        var path = "/RoleMappings/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingFindOne(filter: String? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        roleMappingFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<RoleMapping>
     */
    open class func roleMappingFindOne(filter: String? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            roleMappingFindOne(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     - GET /RoleMappings/findOne
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func roleMappingFindOneWithRequestBuilder(filter: String? = nil) -> RequestBuilder<RoleMapping> {
        let path = "/RoleMappings/findOne"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingPatchOrCreate(data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        roleMappingPatchOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<RoleMapping>
     */
    open class func roleMappingPatchOrCreate(data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            roleMappingPatchOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /RoleMappings
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func roleMappingPatchOrCreateWithRequestBuilder(data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        let path = "/RoleMappings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetches belongsTo relation role.
     
     - parameter id: (path) RoleMapping id 
     - parameter refresh: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingPrototypeGetRole(id: String, refresh: Bool? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        roleMappingPrototypeGetRoleWithRequestBuilder(id: id, refresh: refresh).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Fetches belongsTo relation role.
     
     - parameter id: (path) RoleMapping id 
     - parameter refresh: (query)  (optional)
     - returns: Observable<Role>
     */
    open class func roleMappingPrototypeGetRole(id: String, refresh: Bool? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            roleMappingPrototypeGetRole(id: id, refresh: refresh) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Fetches belongsTo relation role.
     - GET /RoleMappings/{id}/role
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter id: (path) RoleMapping id 
     - parameter refresh: (query)  (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func roleMappingPrototypeGetRoleWithRequestBuilder(id: String, refresh: Bool? = nil) -> RequestBuilder<Role> {
        var path = "/RoleMappings/{id}/role"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "refresh": refresh
        ])
        

        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) RoleMapping id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingPrototypePatchAttributes(id: String, data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        roleMappingPrototypePatchAttributesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) RoleMapping id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<RoleMapping>
     */
    open class func roleMappingPrototypePatchAttributes(id: String, data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            roleMappingPrototypePatchAttributes(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /RoleMappings/{id}
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter id: (path) RoleMapping id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func roleMappingPrototypePatchAttributesWithRequestBuilder(id: String, data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        var path = "/RoleMappings/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingReplaceByIdPostRoleMappingsidReplace(id: String, data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        roleMappingReplaceByIdPostRoleMappingsidReplaceWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<RoleMapping>
     */
    open class func roleMappingReplaceByIdPostRoleMappingsidReplace(id: String, data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            roleMappingReplaceByIdPostRoleMappingsidReplace(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /RoleMappings/{id}/replace
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func roleMappingReplaceByIdPostRoleMappingsidReplaceWithRequestBuilder(id: String, data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        var path = "/RoleMappings/{id}/replace"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingReplaceByIdPutRoleMappingsid(id: String, data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        roleMappingReplaceByIdPutRoleMappingsidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<RoleMapping>
     */
    open class func roleMappingReplaceByIdPutRoleMappingsid(id: String, data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            roleMappingReplaceByIdPutRoleMappingsid(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - PUT /RoleMappings/{id}
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func roleMappingReplaceByIdPutRoleMappingsidWithRequestBuilder(id: String, data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        var path = "/RoleMappings/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingReplaceOrCreatePostRoleMappingsReplaceOrCreate(data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        roleMappingReplaceOrCreatePostRoleMappingsReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<RoleMapping>
     */
    open class func roleMappingReplaceOrCreatePostRoleMappingsReplaceOrCreate(data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            roleMappingReplaceOrCreatePostRoleMappingsReplaceOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /RoleMappings/replaceOrCreate
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func roleMappingReplaceOrCreatePostRoleMappingsReplaceOrCreateWithRequestBuilder(data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        let path = "/RoleMappings/replaceOrCreate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingReplaceOrCreatePutRoleMappings(data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        roleMappingReplaceOrCreatePutRoleMappingsWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<RoleMapping>
     */
    open class func roleMappingReplaceOrCreatePutRoleMappings(data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            roleMappingReplaceOrCreatePutRoleMappings(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - PUT /RoleMappings
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func roleMappingReplaceOrCreatePutRoleMappingsWithRequestBuilder(data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        let path = "/RoleMappings"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingUpdateAll(_where: String? = nil, data: RoleMapping? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        roleMappingUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<InlineResponse2001>
     */
    open class func roleMappingUpdateAll(_where: String? = nil, data: RoleMapping? = nil) -> Observable<InlineResponse2001> {
        return Observable.create { observer -> Disposable in
            roleMappingUpdateAll(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /RoleMappings/update
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func roleMappingUpdateAllWithRequestBuilder(_where: String? = nil, data: RoleMapping? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/RoleMappings/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleMappingUpsertWithWhere(_where: String? = nil, data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        roleMappingUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<RoleMapping>
     */
    open class func roleMappingUpsertWithWhere(_where: String? = nil, data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            roleMappingUpsertWithWhere(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /RoleMappings/upsertWithWhere
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func roleMappingUpsertWithWhereWithRequestBuilder(_where: String? = nil, data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        let path = "/RoleMappings/upsertWithWhere"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
