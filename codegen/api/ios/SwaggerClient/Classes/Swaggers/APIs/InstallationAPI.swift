//
// InstallationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class InstallationAPI {
    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationCount(_where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        installationCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func installationCount(_where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            installationCount(_where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     - GET /Installations/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func installationCountWithRequestBuilder(_where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/Installations/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationCreate(data: Installation? = nil, completion: @escaping ((_ data: Installation?,_ error: Error?) -> Void)) {
        installationCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Installation>
     */
    open class func installationCreate(data: Installation? = nil) -> Observable<Installation> {
        return Observable.create { observer -> Disposable in
            installationCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Installations
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Installation> 
     */
    open class func installationCreateWithRequestBuilder(data: Installation? = nil) -> RequestBuilder<Installation> {
        let path = "/Installations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Installation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationCreateChangeStreamGetInstallationsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        installationCreateChangeStreamGetInstallationsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - returns: Observable<URL>
     */
    open class func installationCreateChangeStreamGetInstallationsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            installationCreateChangeStreamGetInstallationsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - GET /Installations/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func installationCreateChangeStreamGetInstallationsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Installations/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "options": options
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationCreateChangeStreamPostInstallationsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        installationCreateChangeStreamPostInstallationsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - returns: Observable<URL>
     */
    open class func installationCreateChangeStreamPostInstallationsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            installationCreateChangeStreamPostInstallationsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - POST /Installations/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func installationCreateChangeStreamPostInstallationsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Installations/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "options": options
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationDeleteById(id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        installationDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<Any>
     */
    open class func installationDeleteById(id: String) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            installationDeleteById(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Installations/{id}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<JSON> 
     */
    open class func installationDeleteByIdWithRequestBuilder(id: String) -> RequestBuilder<JSON> {
        var path = "/Installations/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationExistsGetInstallationsidExists(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        installationExistsGetInstallationsidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func installationExistsGetInstallationsidExists(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            installationExistsGetInstallationsidExists(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - GET /Installations/{id}/exists
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func installationExistsGetInstallationsidExistsWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Installations/{id}/exists"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationExistsHeadInstallationsid(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        installationExistsHeadInstallationsidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func installationExistsHeadInstallationsid(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            installationExistsHeadInstallationsid(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - HEAD /Installations/{id}
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func installationExistsHeadInstallationsidWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Installations/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationFind(filter: String? = nil, completion: @escaping ((_ data: [Installation]?,_ error: Error?) -> Void)) {
        installationFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<[Installation]>
     */
    open class func installationFind(filter: String? = nil) -> Observable<[Installation]> {
        return Observable.create { observer -> Disposable in
            installationFind(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Installations
     - examples: [{contentType=application/json, example=[ {
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}, {
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<[Installation]> 
     */
    open class func installationFindWithRequestBuilder(filter: String? = nil) -> RequestBuilder<[Installation]> {
        let path = "/Installations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[Installation]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find installations by application id
     
     - parameter deviceType: (query) Device type (optional)
     - parameter appId: (query) Application id (optional)
     - parameter appVersion: (query) Application version (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationFindByApp(deviceType: String? = nil, appId: String? = nil, appVersion: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        installationFindByAppWithRequestBuilder(deviceType: deviceType, appId: appId, appVersion: appVersion).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find installations by application id
     
     - parameter deviceType: (query) Device type (optional)
     - parameter appId: (query) Application id (optional)
     - parameter appVersion: (query) Application version (optional)
     - returns: Observable<Any>
     */
    open class func installationFindByApp(deviceType: String? = nil, appId: String? = nil, appVersion: String? = nil) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            installationFindByApp(deviceType: deviceType, appId: appId, appVersion: appVersion) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find installations by application id
     - GET /Installations/byApp
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter deviceType: (query) Device type (optional)
     - parameter appId: (query) Application id (optional)
     - parameter appVersion: (query) Application version (optional)

     - returns: RequestBuilder<JSON> 
     */
    open class func installationFindByAppWithRequestBuilder(deviceType: String? = nil, appId: String? = nil, appVersion: String? = nil) -> RequestBuilder<JSON> {
        let path = "/Installations/byApp"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceType": deviceType, 
            "appId": appId, 
            "appVersion": appVersion
        ])
        

        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationFindById(id: String, filter: String? = nil, completion: @escaping ((_ data: Installation?,_ error: Error?) -> Void)) {
        installationFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Installation>
     */
    open class func installationFindById(id: String, filter: String? = nil) -> Observable<Installation> {
        return Observable.create { observer -> Disposable in
            installationFindById(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     - GET /Installations/{id}
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Installation> 
     */
    open class func installationFindByIdWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<Installation> {
        var path = "/Installations/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Installation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find installations by subscriptions
     
     - parameter deviceType: (query) Device type (optional)
     - parameter subscriptions: (query) Subscriptions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationFindBySubscriptions(deviceType: String? = nil, subscriptions: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        installationFindBySubscriptionsWithRequestBuilder(deviceType: deviceType, subscriptions: subscriptions).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find installations by subscriptions
     
     - parameter deviceType: (query) Device type (optional)
     - parameter subscriptions: (query) Subscriptions (optional)
     - returns: Observable<Any>
     */
    open class func installationFindBySubscriptions(deviceType: String? = nil, subscriptions: String? = nil) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            installationFindBySubscriptions(deviceType: deviceType, subscriptions: subscriptions) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find installations by subscriptions
     - GET /Installations/bySubscriptions
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter deviceType: (query) Device type (optional)
     - parameter subscriptions: (query) Subscriptions (optional)

     - returns: RequestBuilder<JSON> 
     */
    open class func installationFindBySubscriptionsWithRequestBuilder(deviceType: String? = nil, subscriptions: String? = nil) -> RequestBuilder<JSON> {
        let path = "/Installations/bySubscriptions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceType": deviceType, 
            "subscriptions": subscriptions
        ])
        

        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find installations by user id
     
     - parameter deviceType: (query) Device type (optional)
     - parameter userId: (query) User id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationFindByUser(deviceType: String? = nil, userId: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        installationFindByUserWithRequestBuilder(deviceType: deviceType, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find installations by user id
     
     - parameter deviceType: (query) Device type (optional)
     - parameter userId: (query) User id (optional)
     - returns: Observable<Any>
     */
    open class func installationFindByUser(deviceType: String? = nil, userId: String? = nil) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            installationFindByUser(deviceType: deviceType, userId: userId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find installations by user id
     - GET /Installations/byUser
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter deviceType: (query) Device type (optional)
     - parameter userId: (query) User id (optional)

     - returns: RequestBuilder<JSON> 
     */
    open class func installationFindByUserWithRequestBuilder(deviceType: String? = nil, userId: String? = nil) -> RequestBuilder<JSON> {
        let path = "/Installations/byUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "deviceType": deviceType, 
            "userId": userId
        ])
        

        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationFindOne(filter: String? = nil, completion: @escaping ((_ data: Installation?,_ error: Error?) -> Void)) {
        installationFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Installation>
     */
    open class func installationFindOne(filter: String? = nil) -> Observable<Installation> {
        return Observable.create { observer -> Disposable in
            installationFindOne(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Installations/findOne
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Installation> 
     */
    open class func installationFindOneWithRequestBuilder(filter: String? = nil) -> RequestBuilder<Installation> {
        let path = "/Installations/findOne"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Installation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationPatchOrCreate(data: Installation? = nil, completion: @escaping ((_ data: Installation?,_ error: Error?) -> Void)) {
        installationPatchOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Installation>
     */
    open class func installationPatchOrCreate(data: Installation? = nil) -> Observable<Installation> {
        return Observable.create { observer -> Disposable in
            installationPatchOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Installations
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Installation> 
     */
    open class func installationPatchOrCreateWithRequestBuilder(data: Installation? = nil) -> RequestBuilder<Installation> {
        let path = "/Installations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Installation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Installation id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationPrototypePatchAttributes(id: String, data: Installation? = nil, completion: @escaping ((_ data: Installation?,_ error: Error?) -> Void)) {
        installationPrototypePatchAttributesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Installation id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Installation>
     */
    open class func installationPrototypePatchAttributes(id: String, data: Installation? = nil) -> Observable<Installation> {
        return Observable.create { observer -> Disposable in
            installationPrototypePatchAttributes(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Installations/{id}
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}}]
     
     - parameter id: (path) Installation id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Installation> 
     */
    open class func installationPrototypePatchAttributesWithRequestBuilder(id: String, data: Installation? = nil) -> RequestBuilder<Installation> {
        var path = "/Installations/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Installation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationReplaceByIdPostInstallationsidReplace(id: String, data: Installation? = nil, completion: @escaping ((_ data: Installation?,_ error: Error?) -> Void)) {
        installationReplaceByIdPostInstallationsidReplaceWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Installation>
     */
    open class func installationReplaceByIdPostInstallationsidReplace(id: String, data: Installation? = nil) -> Observable<Installation> {
        return Observable.create { observer -> Disposable in
            installationReplaceByIdPostInstallationsidReplace(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Installations/{id}/replace
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Installation> 
     */
    open class func installationReplaceByIdPostInstallationsidReplaceWithRequestBuilder(id: String, data: Installation? = nil) -> RequestBuilder<Installation> {
        var path = "/Installations/{id}/replace"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Installation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationReplaceByIdPutInstallationsid(id: String, data: Installation? = nil, completion: @escaping ((_ data: Installation?,_ error: Error?) -> Void)) {
        installationReplaceByIdPutInstallationsidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Installation>
     */
    open class func installationReplaceByIdPutInstallationsid(id: String, data: Installation? = nil) -> Observable<Installation> {
        return Observable.create { observer -> Disposable in
            installationReplaceByIdPutInstallationsid(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - PUT /Installations/{id}
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Installation> 
     */
    open class func installationReplaceByIdPutInstallationsidWithRequestBuilder(id: String, data: Installation? = nil) -> RequestBuilder<Installation> {
        var path = "/Installations/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Installation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationReplaceOrCreatePostInstallationsReplaceOrCreate(data: Installation? = nil, completion: @escaping ((_ data: Installation?,_ error: Error?) -> Void)) {
        installationReplaceOrCreatePostInstallationsReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Installation>
     */
    open class func installationReplaceOrCreatePostInstallationsReplaceOrCreate(data: Installation? = nil) -> Observable<Installation> {
        return Observable.create { observer -> Disposable in
            installationReplaceOrCreatePostInstallationsReplaceOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Installations/replaceOrCreate
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Installation> 
     */
    open class func installationReplaceOrCreatePostInstallationsReplaceOrCreateWithRequestBuilder(data: Installation? = nil) -> RequestBuilder<Installation> {
        let path = "/Installations/replaceOrCreate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Installation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationReplaceOrCreatePutInstallations(data: Installation? = nil, completion: @escaping ((_ data: Installation?,_ error: Error?) -> Void)) {
        installationReplaceOrCreatePutInstallationsWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Installation>
     */
    open class func installationReplaceOrCreatePutInstallations(data: Installation? = nil) -> Observable<Installation> {
        return Observable.create { observer -> Disposable in
            installationReplaceOrCreatePutInstallations(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - PUT /Installations
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Installation> 
     */
    open class func installationReplaceOrCreatePutInstallationsWithRequestBuilder(data: Installation? = nil) -> RequestBuilder<Installation> {
        let path = "/Installations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Installation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationUpdateAll(_where: String? = nil, data: Installation? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        installationUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<InlineResponse2001>
     */
    open class func installationUpdateAll(_where: String? = nil, data: Installation? = nil) -> Observable<InlineResponse2001> {
        return Observable.create { observer -> Disposable in
            installationUpdateAll(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Installations/update
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func installationUpdateAllWithRequestBuilder(_where: String? = nil, data: Installation? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/Installations/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func installationUpsertWithWhere(_where: String? = nil, data: Installation? = nil, completion: @escaping ((_ data: Installation?,_ error: Error?) -> Void)) {
        installationUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Installation>
     */
    open class func installationUpsertWithWhere(_where: String? = nil, data: Installation? = nil) -> Observable<Installation> {
        return Observable.create { observer -> Disposable in
            installationUpsertWithWhere(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Installations/upsertWithWhere
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "badge" : 0.8008281904610115,
  "appVersion" : "appVersion",
  "subscriptions" : [ "subscriptions", "subscriptions" ],
  "created" : "2000-01-23T04:56:07.000+00:00",
  "appId" : "appId",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "timeZone" : "timeZone",
  "id" : 6.027456183070403,
  "userId" : "userId",
  "deviceToken" : "deviceToken",
  "status" : "status"
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Installation> 
     */
    open class func installationUpsertWithWhereWithRequestBuilder(_where: String? = nil, data: Installation? = nil) -> RequestBuilder<Installation> {
        let path = "/Installations/upsertWithWhere"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<Installation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
