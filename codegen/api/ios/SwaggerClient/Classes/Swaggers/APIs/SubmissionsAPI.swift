//
// SubmissionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class SubmissionsAPI {
    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsCount(_where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        submissionsCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func submissionsCount(_where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            submissionsCount(_where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     - GET /Submissions/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func submissionsCountWithRequestBuilder(_where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/Submissions/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsCreate(data: Submissions? = nil, completion: @escaping ((_ data: Submissions?,_ error: Error?) -> Void)) {
        submissionsCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Submissions>
     */
    open class func submissionsCreate(data: Submissions? = nil) -> Observable<Submissions> {
        return Observable.create { observer -> Disposable in
            submissionsCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Submissions
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Submissions> 
     */
    open class func submissionsCreateWithRequestBuilder(data: Submissions? = nil) -> RequestBuilder<Submissions> {
        let path = "/Submissions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Submissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsCreateChangeStreamGetSubmissionsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        submissionsCreateChangeStreamGetSubmissionsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - returns: Observable<URL>
     */
    open class func submissionsCreateChangeStreamGetSubmissionsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            submissionsCreateChangeStreamGetSubmissionsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - GET /Submissions/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func submissionsCreateChangeStreamGetSubmissionsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Submissions/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "options": options
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsCreateChangeStreamPostSubmissionsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        submissionsCreateChangeStreamPostSubmissionsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - returns: Observable<URL>
     */
    open class func submissionsCreateChangeStreamPostSubmissionsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            submissionsCreateChangeStreamPostSubmissionsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - POST /Submissions/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func submissionsCreateChangeStreamPostSubmissionsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Submissions/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "options": options
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsDeleteById(id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        submissionsDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<Any>
     */
    open class func submissionsDeleteById(id: String) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            submissionsDeleteById(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Submissions/{id}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<JSON> 
     */
    open class func submissionsDeleteByIdWithRequestBuilder(id: String) -> RequestBuilder<JSON> {
        var path = "/Submissions/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsExistsGetSubmissionsidExists(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        submissionsExistsGetSubmissionsidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func submissionsExistsGetSubmissionsidExists(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            submissionsExistsGetSubmissionsidExists(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - GET /Submissions/{id}/exists
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func submissionsExistsGetSubmissionsidExistsWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Submissions/{id}/exists"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsExistsHeadSubmissionsid(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        submissionsExistsHeadSubmissionsidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func submissionsExistsHeadSubmissionsid(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            submissionsExistsHeadSubmissionsid(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - HEAD /Submissions/{id}
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func submissionsExistsHeadSubmissionsidWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Submissions/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsFind(filter: String? = nil, completion: @escaping ((_ data: [Submissions]?,_ error: Error?) -> Void)) {
        submissionsFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<[Submissions]>
     */
    open class func submissionsFind(filter: String? = nil) -> Observable<[Submissions]> {
        return Observable.create { observer -> Disposable in
            submissionsFind(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Submissions
     - examples: [{contentType=application/json, example=[ {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}, {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<[Submissions]> 
     */
    open class func submissionsFindWithRequestBuilder(filter: String? = nil) -> RequestBuilder<[Submissions]> {
        let path = "/Submissions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[Submissions]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsFindById(id: String, filter: String? = nil, completion: @escaping ((_ data: Submissions?,_ error: Error?) -> Void)) {
        submissionsFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Submissions>
     */
    open class func submissionsFindById(id: String, filter: String? = nil) -> Observable<Submissions> {
        return Observable.create { observer -> Disposable in
            submissionsFindById(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     - GET /Submissions/{id}
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Submissions> 
     */
    open class func submissionsFindByIdWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<Submissions> {
        var path = "/Submissions/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Submissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsFindOne(filter: String? = nil, completion: @escaping ((_ data: Submissions?,_ error: Error?) -> Void)) {
        submissionsFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Submissions>
     */
    open class func submissionsFindOne(filter: String? = nil) -> Observable<Submissions> {
        return Observable.create { observer -> Disposable in
            submissionsFindOne(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Submissions/findOne
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Submissions> 
     */
    open class func submissionsFindOneWithRequestBuilder(filter: String? = nil) -> RequestBuilder<Submissions> {
        let path = "/Submissions/findOne"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Submissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsPatchOrCreate(data: Submissions? = nil, completion: @escaping ((_ data: Submissions?,_ error: Error?) -> Void)) {
        submissionsPatchOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Submissions>
     */
    open class func submissionsPatchOrCreate(data: Submissions? = nil) -> Observable<Submissions> {
        return Observable.create { observer -> Disposable in
            submissionsPatchOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Submissions
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Submissions> 
     */
    open class func submissionsPatchOrCreateWithRequestBuilder(data: Submissions? = nil) -> RequestBuilder<Submissions> {
        let path = "/Submissions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Submissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Submissions id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsPrototypePatchAttributes(id: String, data: Submissions? = nil, completion: @escaping ((_ data: Submissions?,_ error: Error?) -> Void)) {
        submissionsPrototypePatchAttributesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Submissions id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Submissions>
     */
    open class func submissionsPrototypePatchAttributes(id: String, data: Submissions? = nil) -> Observable<Submissions> {
        return Observable.create { observer -> Disposable in
            submissionsPrototypePatchAttributes(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Submissions/{id}
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Submissions id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Submissions> 
     */
    open class func submissionsPrototypePatchAttributesWithRequestBuilder(id: String, data: Submissions? = nil) -> RequestBuilder<Submissions> {
        var path = "/Submissions/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Submissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsReplaceByIdPostSubmissionsidReplace(id: String, data: Submissions? = nil, completion: @escaping ((_ data: Submissions?,_ error: Error?) -> Void)) {
        submissionsReplaceByIdPostSubmissionsidReplaceWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Submissions>
     */
    open class func submissionsReplaceByIdPostSubmissionsidReplace(id: String, data: Submissions? = nil) -> Observable<Submissions> {
        return Observable.create { observer -> Disposable in
            submissionsReplaceByIdPostSubmissionsidReplace(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Submissions/{id}/replace
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Submissions> 
     */
    open class func submissionsReplaceByIdPostSubmissionsidReplaceWithRequestBuilder(id: String, data: Submissions? = nil) -> RequestBuilder<Submissions> {
        var path = "/Submissions/{id}/replace"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Submissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsReplaceByIdPutSubmissionsid(id: String, data: Submissions? = nil, completion: @escaping ((_ data: Submissions?,_ error: Error?) -> Void)) {
        submissionsReplaceByIdPutSubmissionsidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Submissions>
     */
    open class func submissionsReplaceByIdPutSubmissionsid(id: String, data: Submissions? = nil) -> Observable<Submissions> {
        return Observable.create { observer -> Disposable in
            submissionsReplaceByIdPutSubmissionsid(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - PUT /Submissions/{id}
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Submissions> 
     */
    open class func submissionsReplaceByIdPutSubmissionsidWithRequestBuilder(id: String, data: Submissions? = nil) -> RequestBuilder<Submissions> {
        var path = "/Submissions/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Submissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsReplaceOrCreatePostSubmissionsReplaceOrCreate(data: Submissions? = nil, completion: @escaping ((_ data: Submissions?,_ error: Error?) -> Void)) {
        submissionsReplaceOrCreatePostSubmissionsReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Submissions>
     */
    open class func submissionsReplaceOrCreatePostSubmissionsReplaceOrCreate(data: Submissions? = nil) -> Observable<Submissions> {
        return Observable.create { observer -> Disposable in
            submissionsReplaceOrCreatePostSubmissionsReplaceOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Submissions/replaceOrCreate
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Submissions> 
     */
    open class func submissionsReplaceOrCreatePostSubmissionsReplaceOrCreateWithRequestBuilder(data: Submissions? = nil) -> RequestBuilder<Submissions> {
        let path = "/Submissions/replaceOrCreate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Submissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsReplaceOrCreatePutSubmissions(data: Submissions? = nil, completion: @escaping ((_ data: Submissions?,_ error: Error?) -> Void)) {
        submissionsReplaceOrCreatePutSubmissionsWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Submissions>
     */
    open class func submissionsReplaceOrCreatePutSubmissions(data: Submissions? = nil) -> Observable<Submissions> {
        return Observable.create { observer -> Disposable in
            submissionsReplaceOrCreatePutSubmissions(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - PUT /Submissions
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Submissions> 
     */
    open class func submissionsReplaceOrCreatePutSubmissionsWithRequestBuilder(data: Submissions? = nil) -> RequestBuilder<Submissions> {
        let path = "/Submissions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Submissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsUpdateAll(_where: String? = nil, data: Submissions? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        submissionsUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<InlineResponse2001>
     */
    open class func submissionsUpdateAll(_where: String? = nil, data: Submissions? = nil) -> Observable<InlineResponse2001> {
        return Observable.create { observer -> Disposable in
            submissionsUpdateAll(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Submissions/update
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func submissionsUpdateAllWithRequestBuilder(_where: String? = nil, data: Submissions? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/Submissions/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func submissionsUpsertWithWhere(_where: String? = nil, data: Submissions? = nil, completion: @escaping ((_ data: Submissions?,_ error: Error?) -> Void)) {
        submissionsUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Submissions>
     */
    open class func submissionsUpsertWithWhere(_where: String? = nil, data: Submissions? = nil) -> Observable<Submissions> {
        return Observable.create { observer -> Disposable in
            submissionsUpsertWithWhere(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Submissions/upsertWithWhere
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "groupName" : "groupName",
  "teacher" : "teacher",
  "phone" : 0.8008281904610115,
  "city" : "city",
  "school" : "school",
  "district" : "district",
  "id" : 6.027456183070403,
  "class" : "class",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Submissions> 
     */
    open class func submissionsUpsertWithWhereWithRequestBuilder(_where: String? = nil, data: Submissions? = nil) -> RequestBuilder<Submissions> {
        let path = "/Submissions/upsertWithWhere"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<Submissions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
