//
// AccountAccessTokenAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class AccountAccessTokenAPI {
    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenCount(_where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        accountAccessTokenCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func accountAccessTokenCount(_where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenCount(_where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     - GET /AccountAccessTokens/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func accountAccessTokenCountWithRequestBuilder(_where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/AccountAccessTokens/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenCreate(data: AccountAccessToken? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountAccessTokenCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountAccessTokenCreate(data: AccountAccessToken? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     - POST /AccountAccessTokens
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountAccessTokenCreateWithRequestBuilder(data: AccountAccessToken? = nil) -> RequestBuilder<AccountAccessToken> {
        let path = "/AccountAccessTokens"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenCreateChangeStreamGetAccountAccessTokensChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        accountAccessTokenCreateChangeStreamGetAccountAccessTokensChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - returns: Observable<URL>
     */
    open class func accountAccessTokenCreateChangeStreamGetAccountAccessTokensChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenCreateChangeStreamGetAccountAccessTokensChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - GET /AccountAccessTokens/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func accountAccessTokenCreateChangeStreamGetAccountAccessTokensChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/AccountAccessTokens/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "options": options
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenCreateChangeStreamPostAccountAccessTokensChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        accountAccessTokenCreateChangeStreamPostAccountAccessTokensChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - returns: Observable<URL>
     */
    open class func accountAccessTokenCreateChangeStreamPostAccountAccessTokensChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenCreateChangeStreamPostAccountAccessTokensChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - POST /AccountAccessTokens/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func accountAccessTokenCreateChangeStreamPostAccountAccessTokensChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/AccountAccessTokens/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "options": options
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenDeleteById(id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        accountAccessTokenDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<Any>
     */
    open class func accountAccessTokenDeleteById(id: String) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenDeleteById(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /AccountAccessTokens/{id}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<JSON> 
     */
    open class func accountAccessTokenDeleteByIdWithRequestBuilder(id: String) -> RequestBuilder<JSON> {
        var path = "/AccountAccessTokens/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenExistsGetAccountAccessTokensidExists(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        accountAccessTokenExistsGetAccountAccessTokensidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func accountAccessTokenExistsGetAccountAccessTokensidExists(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenExistsGetAccountAccessTokensidExists(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - GET /AccountAccessTokens/{id}/exists
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func accountAccessTokenExistsGetAccountAccessTokensidExistsWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/AccountAccessTokens/{id}/exists"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenExistsHeadAccountAccessTokensid(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        accountAccessTokenExistsHeadAccountAccessTokensidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func accountAccessTokenExistsHeadAccountAccessTokensid(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenExistsHeadAccountAccessTokensid(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - HEAD /AccountAccessTokens/{id}
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func accountAccessTokenExistsHeadAccountAccessTokensidWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/AccountAccessTokens/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenFind(filter: String? = nil, completion: @escaping ((_ data: [AccountAccessToken]?,_ error: Error?) -> Void)) {
        accountAccessTokenFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<[AccountAccessToken]>
     */
    open class func accountAccessTokenFind(filter: String? = nil) -> Observable<[AccountAccessToken]> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenFind(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     - GET /AccountAccessTokens
     - examples: [{contentType=application/json, example=[ {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}, {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<[AccountAccessToken]> 
     */
    open class func accountAccessTokenFindWithRequestBuilder(filter: String? = nil) -> RequestBuilder<[AccountAccessToken]> {
        let path = "/AccountAccessTokens"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[AccountAccessToken]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenFindById(id: String, filter: String? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountAccessTokenFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountAccessTokenFindById(id: String, filter: String? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenFindById(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     - GET /AccountAccessTokens/{id}
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountAccessTokenFindByIdWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<AccountAccessToken> {
        var path = "/AccountAccessTokens/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenFindOne(filter: String? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountAccessTokenFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountAccessTokenFindOne(filter: String? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenFindOne(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     - GET /AccountAccessTokens/findOne
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountAccessTokenFindOneWithRequestBuilder(filter: String? = nil) -> RequestBuilder<AccountAccessToken> {
        let path = "/AccountAccessTokens/findOne"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenPatchOrCreate(data: AccountAccessToken? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountAccessTokenPatchOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountAccessTokenPatchOrCreate(data: AccountAccessToken? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenPatchOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /AccountAccessTokens
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountAccessTokenPatchOrCreateWithRequestBuilder(data: AccountAccessToken? = nil) -> RequestBuilder<AccountAccessToken> {
        let path = "/AccountAccessTokens"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fetches belongsTo relation user.
     
     - parameter id: (path) AccountAccessToken id 
     - parameter refresh: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenPrototypeGetUser(id: String, refresh: Bool? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        accountAccessTokenPrototypeGetUserWithRequestBuilder(id: id, refresh: refresh).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Fetches belongsTo relation user.
     
     - parameter id: (path) AccountAccessToken id 
     - parameter refresh: (query)  (optional)
     - returns: Observable<Account>
     */
    open class func accountAccessTokenPrototypeGetUser(id: String, refresh: Bool? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenPrototypeGetUser(id: id, refresh: refresh) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Fetches belongsTo relation user.
     - GET /AccountAccessTokens/{id}/user
     - examples: [{contentType=application/json, example={
  "emailVerified" : true,
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "role" : "role",
  "phone" : "phone",
  "kind" : "kind",
  "realm" : "realm",
  "id" : 0.8008281904610115,
  "email" : "email",
  "status" : "status",
  "username" : "username",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) AccountAccessToken id 
     - parameter refresh: (query)  (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func accountAccessTokenPrototypeGetUserWithRequestBuilder(id: String, refresh: Bool? = nil) -> RequestBuilder<Account> {
        var path = "/AccountAccessTokens/{id}/user"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "refresh": refresh
        ])
        

        let requestBuilder: RequestBuilder<Account>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) AccountAccessToken id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenPrototypePatchAttributes(id: String, data: AccountAccessToken? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountAccessTokenPrototypePatchAttributesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) AccountAccessToken id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountAccessTokenPrototypePatchAttributes(id: String, data: AccountAccessToken? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenPrototypePatchAttributes(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /AccountAccessTokens/{id}
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter id: (path) AccountAccessToken id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountAccessTokenPrototypePatchAttributesWithRequestBuilder(id: String, data: AccountAccessToken? = nil) -> RequestBuilder<AccountAccessToken> {
        var path = "/AccountAccessTokens/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenReplaceByIdPostAccountAccessTokensidReplace(id: String, data: AccountAccessToken? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountAccessTokenReplaceByIdPostAccountAccessTokensidReplaceWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountAccessTokenReplaceByIdPostAccountAccessTokensidReplace(id: String, data: AccountAccessToken? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenReplaceByIdPostAccountAccessTokensidReplace(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /AccountAccessTokens/{id}/replace
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountAccessTokenReplaceByIdPostAccountAccessTokensidReplaceWithRequestBuilder(id: String, data: AccountAccessToken? = nil) -> RequestBuilder<AccountAccessToken> {
        var path = "/AccountAccessTokens/{id}/replace"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenReplaceByIdPutAccountAccessTokensid(id: String, data: AccountAccessToken? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountAccessTokenReplaceByIdPutAccountAccessTokensidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountAccessTokenReplaceByIdPutAccountAccessTokensid(id: String, data: AccountAccessToken? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenReplaceByIdPutAccountAccessTokensid(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - PUT /AccountAccessTokens/{id}
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountAccessTokenReplaceByIdPutAccountAccessTokensidWithRequestBuilder(id: String, data: AccountAccessToken? = nil) -> RequestBuilder<AccountAccessToken> {
        var path = "/AccountAccessTokens/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenReplaceOrCreatePostAccountAccessTokensReplaceOrCreate(data: AccountAccessToken? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountAccessTokenReplaceOrCreatePostAccountAccessTokensReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountAccessTokenReplaceOrCreatePostAccountAccessTokensReplaceOrCreate(data: AccountAccessToken? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenReplaceOrCreatePostAccountAccessTokensReplaceOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /AccountAccessTokens/replaceOrCreate
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountAccessTokenReplaceOrCreatePostAccountAccessTokensReplaceOrCreateWithRequestBuilder(data: AccountAccessToken? = nil) -> RequestBuilder<AccountAccessToken> {
        let path = "/AccountAccessTokens/replaceOrCreate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenReplaceOrCreatePutAccountAccessTokens(data: AccountAccessToken? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountAccessTokenReplaceOrCreatePutAccountAccessTokensWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountAccessTokenReplaceOrCreatePutAccountAccessTokens(data: AccountAccessToken? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenReplaceOrCreatePutAccountAccessTokens(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - PUT /AccountAccessTokens
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountAccessTokenReplaceOrCreatePutAccountAccessTokensWithRequestBuilder(data: AccountAccessToken? = nil) -> RequestBuilder<AccountAccessToken> {
        let path = "/AccountAccessTokens"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenUpdateAll(_where: String? = nil, data: AccountAccessToken? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        accountAccessTokenUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<InlineResponse2001>
     */
    open class func accountAccessTokenUpdateAll(_where: String? = nil, data: AccountAccessToken? = nil) -> Observable<InlineResponse2001> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenUpdateAll(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /AccountAccessTokens/update
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func accountAccessTokenUpdateAllWithRequestBuilder(_where: String? = nil, data: AccountAccessToken? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/AccountAccessTokens/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountAccessTokenUpsertWithWhere(_where: String? = nil, data: AccountAccessToken? = nil, completion: @escaping ((_ data: AccountAccessToken?,_ error: Error?) -> Void)) {
        accountAccessTokenUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<AccountAccessToken>
     */
    open class func accountAccessTokenUpsertWithWhere(_where: String? = nil, data: AccountAccessToken? = nil) -> Observable<AccountAccessToken> {
        return Observable.create { observer -> Disposable in
            accountAccessTokenUpsertWithWhere(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /AccountAccessTokens/upsertWithWhere
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "id",
  "scopes" : [ "scopes", "scopes" ],
  "ttl" : 0.8008281904610115,
  "userId" : 6.027456183070403
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<AccountAccessToken> 
     */
    open class func accountAccessTokenUpsertWithWhereWithRequestBuilder(_where: String? = nil, data: AccountAccessToken? = nil) -> RequestBuilder<AccountAccessToken> {
        let path = "/AccountAccessTokens/upsertWithWhere"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<AccountAccessToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
