//
// RoleAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class RoleAPI {
    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleCount(_where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        roleCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func roleCount(_where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            roleCount(_where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     - GET /Roles/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func roleCountWithRequestBuilder(_where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/Roles/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleCreate(data: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        roleCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Role>
     */
    open class func roleCreate(data: Role? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            roleCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Roles
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func roleCreateWithRequestBuilder(data: Role? = nil) -> RequestBuilder<Role> {
        let path = "/Roles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleCreateChangeStreamGetRolesChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        roleCreateChangeStreamGetRolesChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - returns: Observable<URL>
     */
    open class func roleCreateChangeStreamGetRolesChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            roleCreateChangeStreamGetRolesChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - GET /Roles/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func roleCreateChangeStreamGetRolesChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Roles/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "options": options
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleCreateChangeStreamPostRolesChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        roleCreateChangeStreamPostRolesChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - returns: Observable<URL>
     */
    open class func roleCreateChangeStreamPostRolesChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            roleCreateChangeStreamPostRolesChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - POST /Roles/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func roleCreateChangeStreamPostRolesChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Roles/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "options": options
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleDeleteById(id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        roleDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<Any>
     */
    open class func roleDeleteById(id: String) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            roleDeleteById(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Roles/{id}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<JSON> 
     */
    open class func roleDeleteByIdWithRequestBuilder(id: String) -> RequestBuilder<JSON> {
        var path = "/Roles/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleExistsGetRolesidExists(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        roleExistsGetRolesidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func roleExistsGetRolesidExists(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            roleExistsGetRolesidExists(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - GET /Roles/{id}/exists
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func roleExistsGetRolesidExistsWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Roles/{id}/exists"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleExistsHeadRolesid(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        roleExistsHeadRolesidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func roleExistsHeadRolesid(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            roleExistsHeadRolesid(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - HEAD /Roles/{id}
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func roleExistsHeadRolesidWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Roles/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleFind(filter: String? = nil, completion: @escaping ((_ data: [Role]?,_ error: Error?) -> Void)) {
        roleFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<[Role]>
     */
    open class func roleFind(filter: String? = nil) -> Observable<[Role]> {
        return Observable.create { observer -> Disposable in
            roleFind(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Roles
     - examples: [{contentType=application/json, example=[ {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}, {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<[Role]> 
     */
    open class func roleFindWithRequestBuilder(filter: String? = nil) -> RequestBuilder<[Role]> {
        let path = "/Roles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[Role]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleFindById(id: String, filter: String? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        roleFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Role>
     */
    open class func roleFindById(id: String, filter: String? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            roleFindById(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     - GET /Roles/{id}
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func roleFindByIdWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<Role> {
        var path = "/Roles/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleFindOne(filter: String? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        roleFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Role>
     */
    open class func roleFindOne(filter: String? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            roleFindOne(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Roles/findOne
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func roleFindOneWithRequestBuilder(filter: String? = nil) -> RequestBuilder<Role> {
        let path = "/Roles/findOne"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rolePatchOrCreate(data: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        rolePatchOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Role>
     */
    open class func rolePatchOrCreate(data: Role? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            rolePatchOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Roles
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func rolePatchOrCreateWithRequestBuilder(data: Role? = nil) -> RequestBuilder<Role> {
        let path = "/Roles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Counts principals of Role.
     
     - parameter id: (path) Role id 
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rolePrototypeCountPrincipals(id: String, _where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        rolePrototypeCountPrincipalsWithRequestBuilder(id: id, _where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Counts principals of Role.
     
     - parameter id: (path) Role id 
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func rolePrototypeCountPrincipals(id: String, _where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            rolePrototypeCountPrincipals(id: id, _where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Counts principals of Role.
     - GET /Roles/{id}/principals/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter id: (path) Role id 
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func rolePrototypeCountPrincipalsWithRequestBuilder(id: String, _where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        var path = "/Roles/{id}/principals/count"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates a new instance in principals of this model.
     
     - parameter id: (path) Role id 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rolePrototypeCreatePrincipals(id: String, data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        rolePrototypeCreatePrincipalsWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Creates a new instance in principals of this model.
     
     - parameter id: (path) Role id 
     - parameter data: (body)  (optional)
     - returns: Observable<RoleMapping>
     */
    open class func rolePrototypeCreatePrincipals(id: String, data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            rolePrototypeCreatePrincipals(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Creates a new instance in principals of this model.
     - POST /Roles/{id}/principals
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter id: (path) Role id 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func rolePrototypeCreatePrincipalsWithRequestBuilder(id: String, data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        var path = "/Roles/{id}/principals"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deletes all principals of this model.
     
     - parameter id: (path) Role id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rolePrototypeDeletePrincipals(id: String, completion: @escaping ((_ error: Error?) -> Void)) {
        rolePrototypeDeletePrincipalsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Deletes all principals of this model.
     
     - parameter id: (path) Role id 
     - returns: Observable<Void>
     */
    open class func rolePrototypeDeletePrincipals(id: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            rolePrototypeDeletePrincipals(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Deletes all principals of this model.
     - DELETE /Roles/{id}/principals
     
     - parameter id: (path) Role id 

     - returns: RequestBuilder<Void> 
     */
    open class func rolePrototypeDeletePrincipalsWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var path = "/Roles/{id}/principals"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a related item by id for principals.
     
     - parameter id: (path) Role id 
     - parameter fk: (path) Foreign key for principals 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rolePrototypeDestroyByIdPrincipals(id: String, fk: String, completion: @escaping ((_ error: Error?) -> Void)) {
        rolePrototypeDestroyByIdPrincipalsWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Delete a related item by id for principals.
     
     - parameter id: (path) Role id 
     - parameter fk: (path) Foreign key for principals 
     - returns: Observable<Void>
     */
    open class func rolePrototypeDestroyByIdPrincipals(id: String, fk: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            rolePrototypeDestroyByIdPrincipals(id: id, fk: fk) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a related item by id for principals.
     - DELETE /Roles/{id}/principals/{fk}
     
     - parameter id: (path) Role id 
     - parameter fk: (path) Foreign key for principals 

     - returns: RequestBuilder<Void> 
     */
    open class func rolePrototypeDestroyByIdPrincipalsWithRequestBuilder(id: String, fk: String) -> RequestBuilder<Void> {
        var path = "/Roles/{id}/principals/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a related item by id for principals.
     
     - parameter id: (path) Role id 
     - parameter fk: (path) Foreign key for principals 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rolePrototypeFindByIdPrincipals(id: String, fk: String, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        rolePrototypeFindByIdPrincipalsWithRequestBuilder(id: id, fk: fk).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a related item by id for principals.
     
     - parameter id: (path) Role id 
     - parameter fk: (path) Foreign key for principals 
     - returns: Observable<RoleMapping>
     */
    open class func rolePrototypeFindByIdPrincipals(id: String, fk: String) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            rolePrototypeFindByIdPrincipals(id: id, fk: fk) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a related item by id for principals.
     - GET /Roles/{id}/principals/{fk}
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter id: (path) Role id 
     - parameter fk: (path) Foreign key for principals 

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func rolePrototypeFindByIdPrincipalsWithRequestBuilder(id: String, fk: String) -> RequestBuilder<RoleMapping> {
        var path = "/Roles/{id}/principals/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Queries principals of Role.
     
     - parameter id: (path) Role id 
     - parameter filter: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rolePrototypeGetPrincipals(id: String, filter: String? = nil, completion: @escaping ((_ data: [RoleMapping]?,_ error: Error?) -> Void)) {
        rolePrototypeGetPrincipalsWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Queries principals of Role.
     
     - parameter id: (path) Role id 
     - parameter filter: (query)  (optional)
     - returns: Observable<[RoleMapping]>
     */
    open class func rolePrototypeGetPrincipals(id: String, filter: String? = nil) -> Observable<[RoleMapping]> {
        return Observable.create { observer -> Disposable in
            rolePrototypeGetPrincipals(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Queries principals of Role.
     - GET /Roles/{id}/principals
     - examples: [{contentType=application/json, example=[ {
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}, {
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
} ]}]
     
     - parameter id: (path) Role id 
     - parameter filter: (query)  (optional)

     - returns: RequestBuilder<[RoleMapping]> 
     */
    open class func rolePrototypeGetPrincipalsWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<[RoleMapping]> {
        var path = "/Roles/{id}/principals"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[RoleMapping]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Role id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rolePrototypePatchAttributes(id: String, data: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        rolePrototypePatchAttributesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Role id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Role>
     */
    open class func rolePrototypePatchAttributes(id: String, data: Role? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            rolePrototypePatchAttributes(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Roles/{id}
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter id: (path) Role id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func rolePrototypePatchAttributesWithRequestBuilder(id: String, data: Role? = nil) -> RequestBuilder<Role> {
        var path = "/Roles/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a related item by id for principals.
     
     - parameter id: (path) Role id 
     - parameter fk: (path) Foreign key for principals 
     - parameter data: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rolePrototypeUpdateByIdPrincipals(id: String, fk: String, data: RoleMapping? = nil, completion: @escaping ((_ data: RoleMapping?,_ error: Error?) -> Void)) {
        rolePrototypeUpdateByIdPrincipalsWithRequestBuilder(id: id, fk: fk, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update a related item by id for principals.
     
     - parameter id: (path) Role id 
     - parameter fk: (path) Foreign key for principals 
     - parameter data: (body)  (optional)
     - returns: Observable<RoleMapping>
     */
    open class func rolePrototypeUpdateByIdPrincipals(id: String, fk: String, data: RoleMapping? = nil) -> Observable<RoleMapping> {
        return Observable.create { observer -> Disposable in
            rolePrototypeUpdateByIdPrincipals(id: id, fk: fk, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update a related item by id for principals.
     - PUT /Roles/{id}/principals/{fk}
     - examples: [{contentType=application/json, example={
  "roleId" : 6.027456183070403,
  "principalId" : "principalId",
  "id" : 0.8008281904610115,
  "principalType" : "principalType"
}}]
     
     - parameter id: (path) Role id 
     - parameter fk: (path) Foreign key for principals 
     - parameter data: (body)  (optional)

     - returns: RequestBuilder<RoleMapping> 
     */
    open class func rolePrototypeUpdateByIdPrincipalsWithRequestBuilder(id: String, fk: String, data: RoleMapping? = nil) -> RequestBuilder<RoleMapping> {
        var path = "/Roles/{id}/principals/{fk}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{fk}", with: "\(fk)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoleMapping>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleReplaceByIdPostRolesidReplace(id: String, data: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        roleReplaceByIdPostRolesidReplaceWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Role>
     */
    open class func roleReplaceByIdPostRolesidReplace(id: String, data: Role? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            roleReplaceByIdPostRolesidReplace(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Roles/{id}/replace
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func roleReplaceByIdPostRolesidReplaceWithRequestBuilder(id: String, data: Role? = nil) -> RequestBuilder<Role> {
        var path = "/Roles/{id}/replace"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleReplaceByIdPutRolesid(id: String, data: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        roleReplaceByIdPutRolesidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Role>
     */
    open class func roleReplaceByIdPutRolesid(id: String, data: Role? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            roleReplaceByIdPutRolesid(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - PUT /Roles/{id}
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func roleReplaceByIdPutRolesidWithRequestBuilder(id: String, data: Role? = nil) -> RequestBuilder<Role> {
        var path = "/Roles/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleReplaceOrCreatePostRolesReplaceOrCreate(data: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        roleReplaceOrCreatePostRolesReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Role>
     */
    open class func roleReplaceOrCreatePostRolesReplaceOrCreate(data: Role? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            roleReplaceOrCreatePostRolesReplaceOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Roles/replaceOrCreate
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func roleReplaceOrCreatePostRolesReplaceOrCreateWithRequestBuilder(data: Role? = nil) -> RequestBuilder<Role> {
        let path = "/Roles/replaceOrCreate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleReplaceOrCreatePutRoles(data: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        roleReplaceOrCreatePutRolesWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Role>
     */
    open class func roleReplaceOrCreatePutRoles(data: Role? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            roleReplaceOrCreatePutRoles(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - PUT /Roles
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func roleReplaceOrCreatePutRolesWithRequestBuilder(data: Role? = nil) -> RequestBuilder<Role> {
        let path = "/Roles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleUpdateAll(_where: String? = nil, data: Role? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        roleUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<InlineResponse2001>
     */
    open class func roleUpdateAll(_where: String? = nil, data: Role? = nil) -> Observable<InlineResponse2001> {
        return Observable.create { observer -> Disposable in
            roleUpdateAll(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Roles/update
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func roleUpdateAllWithRequestBuilder(_where: String? = nil, data: Role? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/Roles/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roleUpsertWithWhere(_where: String? = nil, data: Role? = nil, completion: @escaping ((_ data: Role?,_ error: Error?) -> Void)) {
        roleUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Role>
     */
    open class func roleUpsertWithWhere(_where: String? = nil, data: Role? = nil) -> Observable<Role> {
        return Observable.create { observer -> Disposable in
            roleUpsertWithWhere(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Roles/upsertWithWhere
     - examples: [{contentType=application/json, example={
  "created" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Role> 
     */
    open class func roleUpsertWithWhereWithRequestBuilder(_where: String? = nil, data: Role? = nil) -> RequestBuilder<Role> {
        let path = "/Roles/upsertWithWhere"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<Role>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
