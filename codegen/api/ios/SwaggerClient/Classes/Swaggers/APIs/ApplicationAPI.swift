//
// ApplicationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class ApplicationAPI {
    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationCount(_where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        applicationCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func applicationCount(_where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            applicationCount(_where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     - GET /Applications/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func applicationCountWithRequestBuilder(_where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/Applications/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationCreate(data: Application? = nil, completion: @escaping ((_ data: Application?,_ error: Error?) -> Void)) {
        applicationCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Application>
     */
    open class func applicationCreate(data: Application? = nil) -> Observable<Application> {
        return Observable.create { observer -> Disposable in
            applicationCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Applications
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Application> 
     */
    open class func applicationCreateWithRequestBuilder(data: Application? = nil) -> RequestBuilder<Application> {
        let path = "/Applications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Application>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationCreateChangeStreamGetApplicationsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        applicationCreateChangeStreamGetApplicationsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - returns: Observable<URL>
     */
    open class func applicationCreateChangeStreamGetApplicationsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            applicationCreateChangeStreamGetApplicationsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - GET /Applications/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func applicationCreateChangeStreamGetApplicationsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Applications/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "options": options
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationCreateChangeStreamPostApplicationsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        applicationCreateChangeStreamPostApplicationsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - returns: Observable<URL>
     */
    open class func applicationCreateChangeStreamPostApplicationsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            applicationCreateChangeStreamPostApplicationsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - POST /Applications/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func applicationCreateChangeStreamPostApplicationsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Applications/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "options": options
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationDeleteById(id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        applicationDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<Any>
     */
    open class func applicationDeleteById(id: String) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            applicationDeleteById(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Applications/{id}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<JSON> 
     */
    open class func applicationDeleteByIdWithRequestBuilder(id: String) -> RequestBuilder<JSON> {
        var path = "/Applications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationExistsGetApplicationsidExists(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        applicationExistsGetApplicationsidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func applicationExistsGetApplicationsidExists(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            applicationExistsGetApplicationsidExists(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - GET /Applications/{id}/exists
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func applicationExistsGetApplicationsidExistsWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Applications/{id}/exists"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationExistsHeadApplicationsid(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        applicationExistsHeadApplicationsidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func applicationExistsHeadApplicationsid(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            applicationExistsHeadApplicationsid(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - HEAD /Applications/{id}
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func applicationExistsHeadApplicationsidWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Applications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationFind(filter: String? = nil, completion: @escaping ((_ data: [Application]?,_ error: Error?) -> Void)) {
        applicationFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<[Application]>
     */
    open class func applicationFind(filter: String? = nil) -> Observable<[Application]> {
        return Observable.create { observer -> Disposable in
            applicationFind(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Applications
     - examples: [{contentType=application/json, example=[ {
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}, {
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<[Application]> 
     */
    open class func applicationFindWithRequestBuilder(filter: String? = nil) -> RequestBuilder<[Application]> {
        let path = "/Applications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[Application]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationFindById(id: String, filter: String? = nil, completion: @escaping ((_ data: Application?,_ error: Error?) -> Void)) {
        applicationFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Application>
     */
    open class func applicationFindById(id: String, filter: String? = nil) -> Observable<Application> {
        return Observable.create { observer -> Disposable in
            applicationFindById(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     - GET /Applications/{id}
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Application> 
     */
    open class func applicationFindByIdWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<Application> {
        var path = "/Applications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Application>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationFindOne(filter: String? = nil, completion: @escaping ((_ data: Application?,_ error: Error?) -> Void)) {
        applicationFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Application>
     */
    open class func applicationFindOne(filter: String? = nil) -> Observable<Application> {
        return Observable.create { observer -> Disposable in
            applicationFindOne(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Applications/findOne
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Application> 
     */
    open class func applicationFindOneWithRequestBuilder(filter: String? = nil) -> RequestBuilder<Application> {
        let path = "/Applications/findOne"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Application>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationPatchOrCreate(data: Application? = nil, completion: @escaping ((_ data: Application?,_ error: Error?) -> Void)) {
        applicationPatchOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Application>
     */
    open class func applicationPatchOrCreate(data: Application? = nil) -> Observable<Application> {
        return Observable.create { observer -> Disposable in
            applicationPatchOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Applications
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Application> 
     */
    open class func applicationPatchOrCreateWithRequestBuilder(data: Application? = nil) -> RequestBuilder<Application> {
        let path = "/Applications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Application>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Application id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationPrototypePatchAttributes(id: String, data: Application? = nil, completion: @escaping ((_ data: Application?,_ error: Error?) -> Void)) {
        applicationPrototypePatchAttributesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Application id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Application>
     */
    open class func applicationPrototypePatchAttributes(id: String, data: Application? = nil) -> Observable<Application> {
        return Observable.create { observer -> Disposable in
            applicationPrototypePatchAttributes(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Applications/{id}
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}}]
     
     - parameter id: (path) Application id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Application> 
     */
    open class func applicationPrototypePatchAttributesWithRequestBuilder(id: String, data: Application? = nil) -> RequestBuilder<Application> {
        var path = "/Applications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Application>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationReplaceByIdPostApplicationsidReplace(id: String, data: Application? = nil, completion: @escaping ((_ data: Application?,_ error: Error?) -> Void)) {
        applicationReplaceByIdPostApplicationsidReplaceWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Application>
     */
    open class func applicationReplaceByIdPostApplicationsidReplace(id: String, data: Application? = nil) -> Observable<Application> {
        return Observable.create { observer -> Disposable in
            applicationReplaceByIdPostApplicationsidReplace(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Applications/{id}/replace
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Application> 
     */
    open class func applicationReplaceByIdPostApplicationsidReplaceWithRequestBuilder(id: String, data: Application? = nil) -> RequestBuilder<Application> {
        var path = "/Applications/{id}/replace"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Application>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationReplaceByIdPutApplicationsid(id: String, data: Application? = nil, completion: @escaping ((_ data: Application?,_ error: Error?) -> Void)) {
        applicationReplaceByIdPutApplicationsidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Application>
     */
    open class func applicationReplaceByIdPutApplicationsid(id: String, data: Application? = nil) -> Observable<Application> {
        return Observable.create { observer -> Disposable in
            applicationReplaceByIdPutApplicationsid(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - PUT /Applications/{id}
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Application> 
     */
    open class func applicationReplaceByIdPutApplicationsidWithRequestBuilder(id: String, data: Application? = nil) -> RequestBuilder<Application> {
        var path = "/Applications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Application>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationReplaceOrCreatePostApplicationsReplaceOrCreate(data: Application? = nil, completion: @escaping ((_ data: Application?,_ error: Error?) -> Void)) {
        applicationReplaceOrCreatePostApplicationsReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Application>
     */
    open class func applicationReplaceOrCreatePostApplicationsReplaceOrCreate(data: Application? = nil) -> Observable<Application> {
        return Observable.create { observer -> Disposable in
            applicationReplaceOrCreatePostApplicationsReplaceOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Applications/replaceOrCreate
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Application> 
     */
    open class func applicationReplaceOrCreatePostApplicationsReplaceOrCreateWithRequestBuilder(data: Application? = nil) -> RequestBuilder<Application> {
        let path = "/Applications/replaceOrCreate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Application>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationReplaceOrCreatePutApplications(data: Application? = nil, completion: @escaping ((_ data: Application?,_ error: Error?) -> Void)) {
        applicationReplaceOrCreatePutApplicationsWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Application>
     */
    open class func applicationReplaceOrCreatePutApplications(data: Application? = nil) -> Observable<Application> {
        return Observable.create { observer -> Disposable in
            applicationReplaceOrCreatePutApplications(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - PUT /Applications
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Application> 
     */
    open class func applicationReplaceOrCreatePutApplicationsWithRequestBuilder(data: Application? = nil) -> RequestBuilder<Application> {
        let path = "/Applications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Application>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationUpdateAll(_where: String? = nil, data: Application? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        applicationUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<InlineResponse2001>
     */
    open class func applicationUpdateAll(_where: String? = nil, data: Application? = nil) -> Observable<InlineResponse2001> {
        return Observable.create { observer -> Disposable in
            applicationUpdateAll(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Applications/update
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func applicationUpdateAllWithRequestBuilder(_where: String? = nil, data: Application? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/Applications/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func applicationUpsertWithWhere(_where: String? = nil, data: Application? = nil, completion: @escaping ((_ data: Application?,_ error: Error?) -> Void)) {
        applicationUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Application>
     */
    open class func applicationUpsertWithWhere(_where: String? = nil, data: Application? = nil) -> Observable<Application> {
        return Observable.create { observer -> Disposable in
            applicationUpsertWithWhere(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Applications/upsertWithWhere
     - examples: [{contentType=application/json, example={
  "owner" : "owner",
  "authenticationEnabled" : true,
  "masterKey" : "masterKey",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "icon" : "icon",
  "description" : "description",
  "callbackUrls" : [ "callbackUrls", "callbackUrls" ],
  "restApiKey" : "restApiKey",
  "windowsKey" : "windowsKey",
  "url" : "url",
  "emailVerified" : true,
  "javaScriptKey" : "javaScriptKey",
  "clientKey" : "clientKey",
  "permissions" : [ "permissions", "permissions" ],
  "authenticationSchemes" : [ null, null ],
  "name" : "name",
  "collaborators" : [ "collaborators", "collaborators" ],
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "realm" : "realm",
  "id" : "id",
  "pushSettings" : { },
  "anonymousAllowed" : true,
  "email" : "email",
  "status" : "sandbox"
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Application> 
     */
    open class func applicationUpsertWithWhereWithRequestBuilder(_where: String? = nil, data: Application? = nil) -> RequestBuilder<Application> {
        let path = "/Applications/upsertWithWhere"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<Application>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
