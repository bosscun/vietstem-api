//
// NotificationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class NotificationAPI {
    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationCount(_where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        notificationCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func notificationCount(_where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            notificationCount(_where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     - GET /Notifications/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func notificationCountWithRequestBuilder(_where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/Notifications/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationCreate(data: Notification? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Notification>
     */
    open class func notificationCreate(data: Notification? = nil) -> Observable<Notification> {
        return Observable.create { observer -> Disposable in
            notificationCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Notifications
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationCreateWithRequestBuilder(data: Notification? = nil) -> RequestBuilder<Notification> {
        let path = "/Notifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationCreateChangeStreamGetNotificationsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        notificationCreateChangeStreamGetNotificationsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - returns: Observable<URL>
     */
    open class func notificationCreateChangeStreamGetNotificationsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            notificationCreateChangeStreamGetNotificationsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - GET /Notifications/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func notificationCreateChangeStreamGetNotificationsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Notifications/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "options": options
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationCreateChangeStreamPostNotificationsChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        notificationCreateChangeStreamPostNotificationsChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - returns: Observable<URL>
     */
    open class func notificationCreateChangeStreamPostNotificationsChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            notificationCreateChangeStreamPostNotificationsChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - POST /Notifications/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func notificationCreateChangeStreamPostNotificationsChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Notifications/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "options": options
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationDeleteById(id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        notificationDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<Any>
     */
    open class func notificationDeleteById(id: String) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            notificationDeleteById(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Notifications/{id}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<JSON> 
     */
    open class func notificationDeleteByIdWithRequestBuilder(id: String) -> RequestBuilder<JSON> {
        var path = "/Notifications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationExistsGetNotificationsidExists(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        notificationExistsGetNotificationsidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func notificationExistsGetNotificationsidExists(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            notificationExistsGetNotificationsidExists(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - GET /Notifications/{id}/exists
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func notificationExistsGetNotificationsidExistsWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Notifications/{id}/exists"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationExistsHeadNotificationsid(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        notificationExistsHeadNotificationsidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func notificationExistsHeadNotificationsid(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            notificationExistsHeadNotificationsid(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - HEAD /Notifications/{id}
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func notificationExistsHeadNotificationsidWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Notifications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationFind(filter: String? = nil, completion: @escaping ((_ data: [Notification]?,_ error: Error?) -> Void)) {
        notificationFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<[Notification]>
     */
    open class func notificationFind(filter: String? = nil) -> Observable<[Notification]> {
        return Observable.create { observer -> Disposable in
            notificationFind(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Notifications
     - examples: [{contentType=application/json, example=[ {
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}, {
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<[Notification]> 
     */
    open class func notificationFindWithRequestBuilder(filter: String? = nil) -> RequestBuilder<[Notification]> {
        let path = "/Notifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[Notification]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationFindById(id: String, filter: String? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Notification>
     */
    open class func notificationFindById(id: String, filter: String? = nil) -> Observable<Notification> {
        return Observable.create { observer -> Disposable in
            notificationFindById(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     - GET /Notifications/{id}
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationFindByIdWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<Notification> {
        var path = "/Notifications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationFindOne(filter: String? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Notification>
     */
    open class func notificationFindOne(filter: String? = nil) -> Observable<Notification> {
        return Observable.create { observer -> Disposable in
            notificationFindOne(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Notifications/findOne
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationFindOneWithRequestBuilder(filter: String? = nil) -> RequestBuilder<Notification> {
        let path = "/Notifications/findOne"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationPatchOrCreate(data: Notification? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationPatchOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Notification>
     */
    open class func notificationPatchOrCreate(data: Notification? = nil) -> Observable<Notification> {
        return Observable.create { observer -> Disposable in
            notificationPatchOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Notifications
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationPatchOrCreateWithRequestBuilder(data: Notification? = nil) -> RequestBuilder<Notification> {
        let path = "/Notifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Notification id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationPrototypePatchAttributes(id: String, data: Notification? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationPrototypePatchAttributesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Notification id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Notification>
     */
    open class func notificationPrototypePatchAttributes(id: String, data: Notification? = nil) -> Observable<Notification> {
        return Observable.create { observer -> Disposable in
            notificationPrototypePatchAttributes(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Notifications/{id}
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}}]
     
     - parameter id: (path) Notification id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationPrototypePatchAttributesWithRequestBuilder(id: String, data: Notification? = nil) -> RequestBuilder<Notification> {
        var path = "/Notifications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationReplaceByIdPostNotificationsidReplace(id: String, data: Notification? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationReplaceByIdPostNotificationsidReplaceWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Notification>
     */
    open class func notificationReplaceByIdPostNotificationsidReplace(id: String, data: Notification? = nil) -> Observable<Notification> {
        return Observable.create { observer -> Disposable in
            notificationReplaceByIdPostNotificationsidReplace(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Notifications/{id}/replace
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationReplaceByIdPostNotificationsidReplaceWithRequestBuilder(id: String, data: Notification? = nil) -> RequestBuilder<Notification> {
        var path = "/Notifications/{id}/replace"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationReplaceByIdPutNotificationsid(id: String, data: Notification? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationReplaceByIdPutNotificationsidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Notification>
     */
    open class func notificationReplaceByIdPutNotificationsid(id: String, data: Notification? = nil) -> Observable<Notification> {
        return Observable.create { observer -> Disposable in
            notificationReplaceByIdPutNotificationsid(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - PUT /Notifications/{id}
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationReplaceByIdPutNotificationsidWithRequestBuilder(id: String, data: Notification? = nil) -> RequestBuilder<Notification> {
        var path = "/Notifications/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationReplaceOrCreatePostNotificationsReplaceOrCreate(data: Notification? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationReplaceOrCreatePostNotificationsReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Notification>
     */
    open class func notificationReplaceOrCreatePostNotificationsReplaceOrCreate(data: Notification? = nil) -> Observable<Notification> {
        return Observable.create { observer -> Disposable in
            notificationReplaceOrCreatePostNotificationsReplaceOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Notifications/replaceOrCreate
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationReplaceOrCreatePostNotificationsReplaceOrCreateWithRequestBuilder(data: Notification? = nil) -> RequestBuilder<Notification> {
        let path = "/Notifications/replaceOrCreate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationReplaceOrCreatePutNotifications(data: Notification? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationReplaceOrCreatePutNotificationsWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Notification>
     */
    open class func notificationReplaceOrCreatePutNotifications(data: Notification? = nil) -> Observable<Notification> {
        return Observable.create { observer -> Disposable in
            notificationReplaceOrCreatePutNotifications(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - PUT /Notifications
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationReplaceOrCreatePutNotificationsWithRequestBuilder(data: Notification? = nil) -> RequestBuilder<Notification> {
        let path = "/Notifications"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationUpdateAll(_where: String? = nil, data: Notification? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        notificationUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<InlineResponse2001>
     */
    open class func notificationUpdateAll(_where: String? = nil, data: Notification? = nil) -> Observable<InlineResponse2001> {
        return Observable.create { observer -> Disposable in
            notificationUpdateAll(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Notifications/update
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func notificationUpdateAllWithRequestBuilder(_where: String? = nil, data: Notification? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/Notifications/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationUpsertWithWhere(_where: String? = nil, data: Notification? = nil, completion: @escaping ((_ data: Notification?,_ error: Error?) -> Void)) {
        notificationUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Notification>
     */
    open class func notificationUpsertWithWhere(_where: String? = nil, data: Notification? = nil) -> Observable<Notification> {
        return Observable.create { observer -> Disposable in
            notificationUpsertWithWhere(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Notifications/upsertWithWhere
     - examples: [{contentType=application/json, example={
  "deviceType" : "deviceType",
  "scheduledTime" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "sound" : "sound",
  "delayWhileIdle" : true,
  "deviceToken" : "deviceToken",
  "badge" : 0.8008281904610115,
  "alert" : { },
  "expirationTime" : "2000-01-23T04:56:07.000+00:00",
  "collapseKey" : "collapseKey",
  "expirationInterval" : 6.027456183070403,
  "modified" : "2000-01-23T04:56:07.000+00:00",
  "id" : 1.4658129805029452,
  "category" : "category",
  "contentAvailable" : true,
  "urlArgs" : [ "urlArgs", "urlArgs" ],
  "status" : "status"
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Notification> 
     */
    open class func notificationUpsertWithWhereWithRequestBuilder(_where: String? = nil, data: Notification? = nil) -> RequestBuilder<Notification> {
        let path = "/Notifications/upsertWithWhere"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<Notification>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
