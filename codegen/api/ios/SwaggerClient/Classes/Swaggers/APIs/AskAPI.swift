//
// AskAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class AskAPI {
    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askCount(_where: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        askCountWithRequestBuilder(_where: _where).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - returns: Observable<InlineResponse2002>
     */
    open class func askCount(_where: String? = nil) -> Observable<InlineResponse2002> {
        return Observable.create { observer -> Disposable in
            askCount(_where: _where) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Count instances of the model matched by where from the data source.
     - GET /Asks/count
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func askCountWithRequestBuilder(_where: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/Asks/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askCreate(data: Ask? = nil, completion: @escaping ((_ data: Ask?,_ error: Error?) -> Void)) {
        askCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Ask>
     */
    open class func askCreate(data: Ask? = nil) -> Observable<Ask> {
        return Observable.create { observer -> Disposable in
            askCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a new instance of the model and persist it into the data source.
     - POST /Asks
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Ask> 
     */
    open class func askCreateWithRequestBuilder(data: Ask? = nil) -> RequestBuilder<Ask> {
        let path = "/Asks"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Ask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askCreateChangeStreamGetAsksChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        askCreateChangeStreamGetAsksChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (query)  (optional)
     - returns: Observable<URL>
     */
    open class func askCreateChangeStreamGetAsksChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            askCreateChangeStreamGetAsksChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - GET /Asks/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (query)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func askCreateChangeStreamGetAsksChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Asks/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "options": options
        ])
        

        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askCreateChangeStreamPostAsksChangeStream(options: String? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        askCreateChangeStreamPostAsksChangeStreamWithRequestBuilder(options: options).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a change stream.
     
     - parameter options: (form)  (optional)
     - returns: Observable<URL>
     */
    open class func askCreateChangeStreamPostAsksChangeStream(options: String? = nil) -> Observable<URL> {
        return Observable.create { observer -> Disposable in
            askCreateChangeStreamPostAsksChangeStream(options: options) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a change stream.
     - POST /Asks/change-stream
     - examples: [{contentType=application/json, example=""}]
     
     - parameter options: (form)  (optional)

     - returns: RequestBuilder<URL> 
     */
    open class func askCreateChangeStreamPostAsksChangeStreamWithRequestBuilder(options: String? = nil) -> RequestBuilder<URL> {
        let path = "/Asks/change-stream"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "options": options
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<URL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askDeleteById(id: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        askDeleteByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<Any>
     */
    open class func askDeleteById(id: String) -> Observable<Any> {
        return Observable.create { observer -> Disposable in
            askDeleteById(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a model instance by {{id}} from the data source.
     - DELETE /Asks/{id}
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<JSON> 
     */
    open class func askDeleteByIdWithRequestBuilder(id: String) -> RequestBuilder<JSON> {
        var path = "/Asks/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<JSON>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askExistsGetAsksidExists(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        askExistsGetAsksidExistsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func askExistsGetAsksidExists(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            askExistsGetAsksidExists(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - GET /Asks/{id}/exists
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func askExistsGetAsksidExistsWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Asks/{id}/exists"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askExistsHeadAsksid(id: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        askExistsHeadAsksidWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Check whether a model instance exists in the data source.
     
     - parameter id: (path) Model id 
     - returns: Observable<InlineResponse200>
     */
    open class func askExistsHeadAsksid(id: String) -> Observable<InlineResponse200> {
        return Observable.create { observer -> Disposable in
            askExistsHeadAsksid(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Check whether a model instance exists in the data source.
     - HEAD /Asks/{id}
     - examples: [{contentType=application/json, example={
  "exists" : true
}}]
     
     - parameter id: (path) Model id 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func askExistsHeadAsksidWithRequestBuilder(id: String) -> RequestBuilder<InlineResponse200> {
        var path = "/Asks/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askFind(filter: String? = nil, completion: @escaping ((_ data: [Ask]?,_ error: Error?) -> Void)) {
        askFindWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<[Ask]>
     */
    open class func askFind(filter: String? = nil) -> Observable<[Ask]> {
        return Observable.create { observer -> Disposable in
            askFind(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find all instances of the model matched by filter from the data source.
     - GET /Asks
     - examples: [{contentType=application/json, example=[ {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}, {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<[Ask]> 
     */
    open class func askFindWithRequestBuilder(filter: String? = nil) -> RequestBuilder<[Ask]> {
        let path = "/Asks"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<[Ask]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askFindById(id: String, filter: String? = nil, completion: @escaping ((_ data: Ask?,_ error: Error?) -> Void)) {
        askFindByIdWithRequestBuilder(id: id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Ask>
     */
    open class func askFindById(id: String, filter: String? = nil) -> Observable<Ask> {
        return Observable.create { observer -> Disposable in
            askFindById(id: id, filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find a model instance by {{id}} from the data source.
     - GET /Asks/{id}
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter filter: (query) Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Ask> 
     */
    open class func askFindByIdWithRequestBuilder(id: String, filter: String? = nil) -> RequestBuilder<Ask> {
        var path = "/Asks/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Ask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askFindOne(filter: String? = nil, completion: @escaping ((_ data: Ask?,_ error: Error?) -> Void)) {
        askFindOneWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     - returns: Observable<Ask>
     */
    open class func askFindOne(filter: String? = nil) -> Observable<Ask> {
        return Observable.create { observer -> Disposable in
            askFindOne(filter: filter) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find first instance of the model matched by filter from the data source.
     - GET /Asks/findOne
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter filter: (query) Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)

     - returns: RequestBuilder<Ask> 
     */
    open class func askFindOneWithRequestBuilder(filter: String? = nil) -> RequestBuilder<Ask> {
        let path = "/Asks/findOne"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filter": filter
        ])
        

        let requestBuilder: RequestBuilder<Ask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askPatchOrCreate(data: Ask? = nil, completion: @escaping ((_ data: Ask?,_ error: Error?) -> Void)) {
        askPatchOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Ask>
     */
    open class func askPatchOrCreate(data: Ask? = nil) -> Observable<Ask> {
        return Observable.create { observer -> Disposable in
            askPatchOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch an existing model instance or insert a new one into the data source.
     - PATCH /Asks
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Ask> 
     */
    open class func askPatchOrCreateWithRequestBuilder(data: Ask? = nil) -> RequestBuilder<Ask> {
        let path = "/Asks"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Ask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Ask id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askPrototypePatchAttributes(id: String, data: Ask? = nil, completion: @escaping ((_ data: Ask?,_ error: Error?) -> Void)) {
        askPrototypePatchAttributesWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Ask id 
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Ask>
     */
    open class func askPrototypePatchAttributes(id: String, data: Ask? = nil) -> Observable<Ask> {
        return Observable.create { observer -> Disposable in
            askPrototypePatchAttributes(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Patch attributes for a model instance and persist it into the data source.
     - PATCH /Asks/{id}
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Ask id 
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Ask> 
     */
    open class func askPrototypePatchAttributesWithRequestBuilder(id: String, data: Ask? = nil) -> RequestBuilder<Ask> {
        var path = "/Asks/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Ask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askReplaceByIdPostAsksidReplace(id: String, data: Ask? = nil, completion: @escaping ((_ data: Ask?,_ error: Error?) -> Void)) {
        askReplaceByIdPostAsksidReplaceWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Ask>
     */
    open class func askReplaceByIdPostAsksidReplace(id: String, data: Ask? = nil) -> Observable<Ask> {
        return Observable.create { observer -> Disposable in
            askReplaceByIdPostAsksidReplace(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - POST /Asks/{id}/replace
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Ask> 
     */
    open class func askReplaceByIdPostAsksidReplaceWithRequestBuilder(id: String, data: Ask? = nil) -> RequestBuilder<Ask> {
        var path = "/Asks/{id}/replace"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Ask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askReplaceByIdPutAsksid(id: String, data: Ask? = nil, completion: @escaping ((_ data: Ask?,_ error: Error?) -> Void)) {
        askReplaceByIdPutAsksidWithRequestBuilder(id: id, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Ask>
     */
    open class func askReplaceByIdPutAsksid(id: String, data: Ask? = nil) -> Observable<Ask> {
        return Observable.create { observer -> Disposable in
            askReplaceByIdPutAsksid(id: id, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace attributes for a model instance and persist it into the data source.
     - PUT /Asks/{id}
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter id: (path) Model id 
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Ask> 
     */
    open class func askReplaceByIdPutAsksidWithRequestBuilder(id: String, data: Ask? = nil) -> RequestBuilder<Ask> {
        var path = "/Asks/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Ask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askReplaceOrCreatePostAsksReplaceOrCreate(data: Ask? = nil, completion: @escaping ((_ data: Ask?,_ error: Error?) -> Void)) {
        askReplaceOrCreatePostAsksReplaceOrCreateWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Ask>
     */
    open class func askReplaceOrCreatePostAsksReplaceOrCreate(data: Ask? = nil) -> Observable<Ask> {
        return Observable.create { observer -> Disposable in
            askReplaceOrCreatePostAsksReplaceOrCreate(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - POST /Asks/replaceOrCreate
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Ask> 
     */
    open class func askReplaceOrCreatePostAsksReplaceOrCreateWithRequestBuilder(data: Ask? = nil) -> RequestBuilder<Ask> {
        let path = "/Asks/replaceOrCreate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Ask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askReplaceOrCreatePutAsks(data: Ask? = nil, completion: @escaping ((_ data: Ask?,_ error: Error?) -> Void)) {
        askReplaceOrCreatePutAsksWithRequestBuilder(data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     
     - parameter data: (body) Model instance data (optional)
     - returns: Observable<Ask>
     */
    open class func askReplaceOrCreatePutAsks(data: Ask? = nil) -> Observable<Ask> {
        return Observable.create { observer -> Disposable in
            askReplaceOrCreatePutAsks(data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Replace an existing model instance or insert a new one into the data source.
     - PUT /Asks
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter data: (body) Model instance data (optional)

     - returns: RequestBuilder<Ask> 
     */
    open class func askReplaceOrCreatePutAsksWithRequestBuilder(data: Ask? = nil) -> RequestBuilder<Ask> {
        let path = "/Asks"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Ask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askUpdateAll(_where: String? = nil, data: Ask? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        askUpdateAllWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<InlineResponse2001>
     */
    open class func askUpdateAll(_where: String? = nil, data: Ask? = nil) -> Observable<InlineResponse2001> {
        return Observable.create { observer -> Disposable in
            askUpdateAll(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update instances of the model matched by {{where}} from the data source.
     - POST /Asks/update
     - examples: [{contentType=application/json, example={
  "count" : 0.8008281904610115
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func askUpdateAllWithRequestBuilder(_where: String? = nil, data: Ask? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/Asks/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func askUpsertWithWhere(_where: String? = nil, data: Ask? = nil, completion: @escaping ((_ data: Ask?,_ error: Error?) -> Void)) {
        askUpsertWithWhereWithRequestBuilder(_where: _where, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)
     - returns: Observable<Ask>
     */
    open class func askUpsertWithWhere(_where: String? = nil, data: Ask? = nil) -> Observable<Ask> {
        return Observable.create { observer -> Disposable in
            askUpsertWithWhere(_where: _where, data: data) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update an existing model instance or insert a new one into the data source based on the where criteria.
     - POST /Asks/upsertWithWhere
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "description" : "description",
  "fullname" : "fullname",
  "id" : 0.8008281904610115,
  "email" : "email",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter _where: (query) Criteria to match model instances (optional)
     - parameter data: (body) An object of model property name/value pairs (optional)

     - returns: RequestBuilder<Ask> 
     */
    open class func askUpsertWithWhereWithRequestBuilder(_where: String? = nil, data: Ask? = nil) -> RequestBuilder<Ask> {
        let path = "/Asks/upsertWithWhere"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "where": _where
        ])
        

        let requestBuilder: RequestBuilder<Ask>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
